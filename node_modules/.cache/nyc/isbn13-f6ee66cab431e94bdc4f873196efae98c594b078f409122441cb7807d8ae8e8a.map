{"version":3,"file":"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts","sources":["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],"names":[],"mappings":"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","sourcesContent":["// export let isbn13 = (str: string | Array<any> | any) => {\n    \n    \n//     let isValid = false;\n//     let strContainer = []\n\n//     let weightBool: boolean = false\n\n\n//     if (str.length === 10) {\n//         str = \"978\" + str.slice(0, 9);\n//         str = str.split(\"\");\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//         str = str.join().replace(/,/g, \"\")\n//         return c % 10 !== 0? str + check_digit.toString(): \"Invalid\";\n//     } else {\n//         str = str.split(\"\");\n//         // console.log(str);\n\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//          strContainer.reduce((a, b) => a + b) % 10 === 0\n//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;\n\n//          return isValid ? \"Valid\":\"Invalid\"\n//     }\n\n\n\n\n// }\n\n\n\nexport const isbn13 = (str: string | Array<any> | any) => {\n    let isValid = false;\n    let strContainer = [];\n  \n    let weightBool = false;\n  \n    if (str.length === 10) {\n      str = \"978\" + str.slice(0, 9);\n      str = str.split(\"\");\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n      let sum = strContainer.reduce((a, b) => a + b);\n      let checkDigit = (10 - (sum % 10)) % 10;\n      str = str.join(\"\").replace(/,/g, \"\");\n  \n      return sum % 10 !== 0 ? str + checkDigit.toString() : \"Invalid\";\n    }else {\n      str = str.split(\"\");\n  \n      if (str[str.length - 1].toUpperCase() === 'X') {\n        str[str.length - 1] = '10';\n      }\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n      let sum = strContainer.reduce((a, b) => a + b);\n      isValid = sum % 10 === 0;\n  \n      return isValid ? \"Valid\" : \"Invalid\";\n    }\n  };\n\n\n// export const isbn13 = (str: string | Array<any> | any) => {\n//     if (str.length === 10) {\n//       str = \"978\" + str.slice(0, 9);\n//     }\n  \n//     if (str.length !== 13) {\n//       return \"Invalid\";\n//     }\n  \n//     let sum = 0;\n//     let weight = 1;\n  \n//     for (let i = 0; i < str.length - 1; i++) {\n//       const digit = parseInt(str[i]);\n//       if (isNaN(digit)) {\n//         return \"Invalid\";\n//       }\n//       sum += digit * weight;\n//       weight = (weight === 1) ? 3 : 1;\n//     }\n  \n//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n//     const actualCheckDigit = parseInt(str[str.length - 1]);\n//   console.log(actualCheckDigit+\" \"+calculatedCheckDigit);\n  \n//     if (isNaN(actualCheckDigit)) {\n//       return \"Invalid\";\n//     }\n  \n//     return calculatedCheckDigit === actualCheckDigit ? \"Valid\" : \"Invalid\";\n//   };\n  "]}