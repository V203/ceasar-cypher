"use strict";// export let isbn13 = (str: string | Array<any> | any) => {
function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="4acaa8607571422a7f85f0e69349d6658094a353";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:0},end:{line:4,column:24}},"2":{start:{line:63,column:15},end:{line:87,column:1}},"3":{start:{line:64,column:4},end:{line:66,column:5}},"4":{start:{line:65,column:8},end:{line:65,column:38}},"5":{start:{line:67,column:4},end:{line:69,column:5}},"6":{start:{line:68,column:8},end:{line:68,column:25}},"7":{start:{line:70,column:14},end:{line:70,column:15}},"8":{start:{line:71,column:17},end:{line:71,column:18}},"9":{start:{line:72,column:4},end:{line:79,column:5}},"10":{start:{line:72,column:17},end:{line:72,column:18}},"11":{start:{line:73,column:22},end:{line:73,column:38}},"12":{start:{line:74,column:8},end:{line:76,column:9}},"13":{start:{line:75,column:12},end:{line:75,column:29}},"14":{start:{line:77,column:8},end:{line:77,column:30}},"15":{start:{line:78,column:8},end:{line:78,column:40}},"16":{start:{line:80,column:33},end:{line:80,column:55}},"17":{start:{line:81,column:29},end:{line:81,column:58}},"18":{start:{line:82,column:4},end:{line:82,column:63}},"19":{start:{line:83,column:4},end:{line:85,column:5}},"20":{start:{line:84,column:8},end:{line:84,column:25}},"21":{start:{line:86,column:4},end:{line:86,column:75}},"22":{start:{line:88,column:0},end:{line:88,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:63,column:15},end:{line:63,column:16}},loc:{start:{line:63,column:24},end:{line:87,column:1}},line:63}},branchMap:{"0":{loc:{start:{line:64,column:4},end:{line:66,column:5}},type:"if",locations:[{start:{line:64,column:4},end:{line:66,column:5}},{start:{line:64,column:4},end:{line:66,column:5}}],line:64},"1":{loc:{start:{line:67,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:69,column:5}},{start:{line:67,column:4},end:{line:69,column:5}}],line:67},"2":{loc:{start:{line:74,column:8},end:{line:76,column:9}},type:"if",locations:[{start:{line:74,column:8},end:{line:76,column:9}},{start:{line:74,column:8},end:{line:76,column:9}}],line:74},"3":{loc:{start:{line:78,column:17},end:{line:78,column:39}},type:"cond-expr",locations:[{start:{line:78,column:34},end:{line:78,column:35}},{start:{line:78,column:38},end:{line:78,column:39}}],line:78},"4":{loc:{start:{line:83,column:4},end:{line:85,column:5}},type:"if",locations:[{start:{line:83,column:4},end:{line:85,column:5}},{start:{line:83,column:4},end:{line:85,column:5}}],line:83},"5":{loc:{start:{line:86,column:11},end:{line:86,column:74}},type:"cond-expr",locations:[{start:{line:86,column:55},end:{line:86,column:62}},{start:{line:86,column:65},end:{line:86,column:74}}],line:86}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:";AAAA,4DAA4D;;;AAG5D,2BAA2B;AAC3B,4BAA4B;AAE5B,sCAAsC;AAGtC,+BAA+B;AAC/B,yCAAyC;AACzC,+BAA+B;AAE/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AAEZ,wDAAwD;AACxD,iDAAiD;AACjD,6CAA6C;AAC7C,wEAAwE;AACxE,eAAe;AACf,+BAA+B;AAC/B,+BAA+B;AAG/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AACZ,uEAAuE;AACvE,wDAAwD;AACxD,iDAAiD;AACjD,2DAA2D;AAC3D,8FAA8F;AAE9F,8CAA8C;AAC9C,QAAQ;AAKR,IAAI;AAIJ,8DAA8D;AAC9D,2BAA2B;AAC3B,6BAA6B;AAE7B,8BAA8B;AAE9B,+BAA+B;AAC/B,uCAAuC;AACvC,6BAA6B;AAE7B,2DAA2D;AAC3D,oCAAoC;AACpC,6EAA6E;AAC7E,UAAU;AAEV,wDAAwD;AACxD,iDAAiD;AACjD,8CAA8C;AAE9C,yEAAyE;AACzE,eAAe;AACf,6BAA6B;AAE7B,yDAAyD;AACzD,sCAAsC;AACtC,UAAU;AAEV,2DAA2D;AAC3D,oCAAoC;AACpC,6EAA6E;AAC7E,UAAU;AAEV,wDAAwD;AACxD,kCAAkC;AAElC,8CAA8C;AAC9C,QAAQ;AACR,OAAO;AAGA,MAAM,MAAM,GAAG,CAAC,GAA8B,EAAE,EAAE;IACrD,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC/B;IAED,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YAChB,OAAO,SAAS,CAAC;SAClB;QACD,GAAG,IAAI,KAAK,GAAG,MAAM,CAAC;QACtB,MAAM,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC;IAED,MAAM,oBAAoB,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACpD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACzD,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAC,GAAG,GAAC,oBAAoB,CAAC,CAAC;IAErD,IAAI,KAAK,CAAC,gBAAgB,CAAC,EAAE;QAC3B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,oBAAoB,KAAK,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;AACzE,CAAC,CAAC;AA9BS,QAAA,MAAM,UA8Bf",sourcesContent:["// export let isbn13 = (str: string | Array<any> | any) => {\n    \n    \n//     let isValid = false;\n//     let strContainer = []\n\n//     let weightBool: boolean = false\n\n\n//     if (str.length === 10) {\n//         str = \"978\" + str.slice(0, 9);\n//         str = str.split(\"\");\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//         str = str.join().replace(/,/g, \"\")\n//         return c % 10 !== 0? str + check_digit.toString(): \"Invalid\";\n//     } else {\n//         str = str.split(\"\");\n//         // console.log(str);\n\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//          strContainer.reduce((a, b) => a + b) % 10 === 0\n//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;\n\n//          return isValid ? \"Valid\":\"Invalid\"\n//     }\n\n\n\n\n// }\n\n\n\n// export const isbn13 = (str: string | Array<any> | any) => {\n//     let isValid = false;\n//     let strContainer = [];\n  \n//     let weightBool = false;\n  \n//     if (str.length === 10) {\n//       str = \"978\" + str.slice(0, 9);\n//       str = str.split(\"\");\n  \n//       for (let index = 0; index < str.length; index++) {\n//         weightBool = !weightBool;\n//         strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n//       }\n  \n//       let sum = strContainer.reduce((a, b) => a + b);\n//       let checkDigit = (10 - (sum % 10)) % 10;\n//       str = str.join(\"\").replace(/,/g, \"\");\n  \n//       return sum % 10 !== 0 ? str + checkDigit.toString() : \"Invalid\";\n//     } else {\n//       str = str.split(\"\");\n  \n//       if (str[str.length - 1].toUpperCase() === 'X') {\n//         str[str.length - 1] = '10';\n//       }\n  \n//       for (let index = 0; index < str.length; index++) {\n//         weightBool = !weightBool;\n//         strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n//       }\n  \n//       let sum = strContainer.reduce((a, b) => a + b);\n//       isValid = sum % 10 === 0;\n  \n//       return isValid ? \"Valid\" : \"Invalid\";\n//     }\n//   };\n\n\nexport const isbn13 = (str: string | Array<any> | any) => {\n    if (str.length === 10) {\n      str = \"978\" + str.slice(0, 9);\n    }\n  \n    if (str.length !== 13) {\n      return \"Invalid\";\n    }\n  \n    let sum = 0;\n    let weight = 1;\n  \n    for (let i = 0; i < str.length - 1; i++) {\n      const digit = parseInt(str[i]);\n      if (isNaN(digit)) {\n        return \"Invalid\";\n      }\n      sum += digit * weight;\n      weight = (weight === 1) ? 3 : 1;\n    }\n  \n    const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n    const actualCheckDigit = parseInt(str[str.length - 1]);\n  console.log(actualCheckDigit+\" \"+calculatedCheckDigit);\n  \n    if (isNaN(actualCheckDigit)) {\n      return \"Invalid\";\n    }\n  \n    return calculatedCheckDigit === actualCheckDigit ? \"Valid\" : \"Invalid\";\n  };\n  "]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4acaa8607571422a7f85f0e69349d6658094a353"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;//     let isValid = false;
//     let strContainer = []
//     let weightBool: boolean = false
//     if (str.length === 10) {
//         str = "978" + str.slice(0, 9);
//         str = str.split("");
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//         str = str.join().replace(/,/g, "")
//         return c % 10 !== 0? str + check_digit.toString(): "Invalid";
//     } else {
//         str = str.split("");
//         // console.log(str);
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//          strContainer.reduce((a, b) => a + b) % 10 === 0
//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;
//          return isValid ? "Valid":"Invalid"
//     }
// }
// export const isbn13 = (str: string | Array<any> | any) => {
//     let isValid = false;
//     let strContainer = [];
//     let weightBool = false;
//     if (str.length === 10) {
//       str = "978" + str.slice(0, 9);
//       str = str.split("");
//       for (let index = 0; index < str.length; index++) {
//         weightBool = !weightBool;
//         strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);
//       }
//       let sum = strContainer.reduce((a, b) => a + b);
//       let checkDigit = (10 - (sum % 10)) % 10;
//       str = str.join("").replace(/,/g, "");
//       return sum % 10 !== 0 ? str + checkDigit.toString() : "Invalid";
//     } else {
//       str = str.split("");
//       if (str[str.length - 1].toUpperCase() === 'X') {
//         str[str.length - 1] = '10';
//       }
//       for (let index = 0; index < str.length; index++) {
//         weightBool = !weightBool;
//         strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);
//       }
//       let sum = strContainer.reduce((a, b) => a + b);
//       isValid = sum % 10 === 0;
//       return isValid ? "Valid" : "Invalid";
//     }
//   };
cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;cov_1az1wpajte().s[3]++;if(str.length===10){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[4]++;str="978"+str.slice(0,9);}else{cov_1az1wpajte().b[0][1]++;}cov_1az1wpajte().s[5]++;if(str.length!==13){cov_1az1wpajte().b[1][0]++;cov_1az1wpajte().s[6]++;return"Invalid";}else{cov_1az1wpajte().b[1][1]++;}let sum=(cov_1az1wpajte().s[7]++,0);let weight=(cov_1az1wpajte().s[8]++,1);cov_1az1wpajte().s[9]++;for(let i=(cov_1az1wpajte().s[10]++,0);i<str.length-1;i++){const digit=(cov_1az1wpajte().s[11]++,parseInt(str[i]));cov_1az1wpajte().s[12]++;if(isNaN(digit)){cov_1az1wpajte().b[2][0]++;cov_1az1wpajte().s[13]++;return"Invalid";}else{cov_1az1wpajte().b[2][1]++;}cov_1az1wpajte().s[14]++;sum+=digit*weight;cov_1az1wpajte().s[15]++;weight=weight===1?(cov_1az1wpajte().b[3][0]++,3):(cov_1az1wpajte().b[3][1]++,1);}const calculatedCheckDigit=(cov_1az1wpajte().s[16]++,(10-sum%10)%10);const actualCheckDigit=(cov_1az1wpajte().s[17]++,parseInt(str[str.length-1]));cov_1az1wpajte().s[18]++;console.log(actualCheckDigit+" "+calculatedCheckDigit);cov_1az1wpajte().s[19]++;if(isNaN(actualCheckDigit)){cov_1az1wpajte().b[4][0]++;cov_1az1wpajte().s[20]++;return"Invalid";}else{cov_1az1wpajte().b[4][1]++;}cov_1az1wpajte().s[21]++;return calculatedCheckDigit===actualCheckDigit?(cov_1az1wpajte().b[5][0]++,"Valid"):(cov_1az1wpajte().b[5][1]++,"Invalid");};cov_1az1wpajte().s[22]++;exports.isbn13=isbn13;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvY29kZXgtY29kZXIvRG9jdW1lbnRzL3Byb2plY3RzL2NlYXNhci1jeXBoZXIvaXNibjEzLnRzIiwic291cmNlcyI6WyIvaG9tZS9jb2RleC1jb2Rlci9Eb2N1bWVudHMvcHJvamVjdHMvY2Vhc2FyLWN5cGhlci9pc2JuMTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDs7O0FBRzVELDJCQUEyQjtBQUMzQiw0QkFBNEI7QUFFNUIsc0NBQXNDO0FBR3RDLCtCQUErQjtBQUMvQix5Q0FBeUM7QUFDekMsK0JBQStCO0FBRS9CLDZEQUE2RDtBQUM3RCx1Q0FBdUM7QUFDdkMsZ0ZBQWdGO0FBRWhGLFlBQVk7QUFFWix3REFBd0Q7QUFDeEQsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3Qyx3RUFBd0U7QUFDeEUsZUFBZTtBQUNmLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFHL0IsNkRBQTZEO0FBQzdELHVDQUF1QztBQUN2QyxnRkFBZ0Y7QUFFaEYsWUFBWTtBQUNaLHVFQUF1RTtBQUN2RSx3REFBd0Q7QUFDeEQsaURBQWlEO0FBQ2pELDJEQUEyRDtBQUMzRCw4RkFBOEY7QUFFOUYsOENBQThDO0FBQzlDLFFBQVE7QUFLUixJQUFJO0FBSUosOERBQThEO0FBQzlELDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFFN0IsOEJBQThCO0FBRTlCLCtCQUErQjtBQUMvQix1Q0FBdUM7QUFDdkMsNkJBQTZCO0FBRTdCLDJEQUEyRDtBQUMzRCxvQ0FBb0M7QUFDcEMsNkVBQTZFO0FBQzdFLFVBQVU7QUFFVix3REFBd0Q7QUFDeEQsaURBQWlEO0FBQ2pELDhDQUE4QztBQUU5Qyx5RUFBeUU7QUFDekUsZUFBZTtBQUNmLDZCQUE2QjtBQUU3Qix5REFBeUQ7QUFDekQsc0NBQXNDO0FBQ3RDLFVBQVU7QUFFViwyREFBMkQ7QUFDM0Qsb0NBQW9DO0FBQ3BDLDZFQUE2RTtBQUM3RSxVQUFVO0FBRVYsd0RBQXdEO0FBQ3hELGtDQUFrQztBQUVsQyw4Q0FBOEM7QUFDOUMsUUFBUTtBQUNSLE9BQU87QUFHQSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQThCLEVBQUUsRUFBRTtJQUNyRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQ3JCLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFFRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQ3JCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoQixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELEdBQUcsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLE1BQU0sR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakM7SUFFRCxNQUFNLG9CQUFvQixHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3BELE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBQyxHQUFHLEdBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUVyRCxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsT0FBTyxvQkFBb0IsS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBOUJTLFFBQUEsTUFBTSxVQThCZiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4cG9ydCBsZXQgaXNibjEzID0gKHN0cjogc3RyaW5nIHwgQXJyYXk8YW55PiB8IGFueSkgPT4ge1xuICAgIFxuICAgIFxuLy8gICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4vLyAgICAgbGV0IHN0ckNvbnRhaW5lciA9IFtdXG5cbi8vICAgICBsZXQgd2VpZ2h0Qm9vbDogYm9vbGVhbiA9IGZhbHNlXG5cblxuLy8gICAgIGlmIChzdHIubGVuZ3RoID09PSAxMCkge1xuLy8gICAgICAgICBzdHIgPSBcIjk3OFwiICsgc3RyLnNsaWNlKDAsIDkpO1xuLy8gICAgICAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIik7XG5cbi8vICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBzdHIubGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbi8vICAgICAgICAgICAgIHdlaWdodEJvb2wgPSAhd2VpZ2h0Qm9vbFxuLy8gICAgICAgICAgICAgc3RyQ29udGFpbmVyW2luZGV4XSA9IHBhcnNlSW50KHN0cltpbmRleF0pICogKHdlaWdodEJvb2wgPyAxIDogMylcblxuLy8gICAgICAgICB9XG5cbi8vICAgICAgICAgbGV0IGMgPSBzdHJDb250YWluZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG4vLyAgICAgICAgIGxldCBjaGVja19kaWdpdCA9ICgxMCAtIChjICUgMTApKSAlIDEwXG4vLyAgICAgICAgIHN0ciA9IHN0ci5qb2luKCkucmVwbGFjZSgvLC9nLCBcIlwiKVxuLy8gICAgICAgICByZXR1cm4gYyAlIDEwICE9PSAwPyBzdHIgKyBjaGVja19kaWdpdC50b1N0cmluZygpOiBcIkludmFsaWRcIjtcbi8vICAgICB9IGVsc2Uge1xuLy8gICAgICAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIik7XG4vLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cik7XG5cblxuLy8gICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IHN0ci5sZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuLy8gICAgICAgICAgICAgd2VpZ2h0Qm9vbCA9ICF3ZWlnaHRCb29sXG4vLyAgICAgICAgICAgICBzdHJDb250YWluZXJbaW5kZXhdID0gcGFyc2VJbnQoc3RyW2luZGV4XSkgKiAod2VpZ2h0Qm9vbCA/IDEgOiAzKVxuXG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgY29uc29sZS5sb2coc3RyQ29udGFpbmVyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpICUgMTAgPT09IDApXG4vLyAgICAgICAgIGxldCBjID0gc3RyQ29udGFpbmVyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xuLy8gICAgICAgICBsZXQgY2hlY2tfZGlnaXQgPSAoMTAgLSAoYyAlIDEwKSkgJSAxMFxuLy8gICAgICAgICAgc3RyQ29udGFpbmVyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpICUgMTAgPT09IDBcbi8vICAgICAgICAgIHN0ckNvbnRhaW5lci5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSAlIDEwID09PSAwID8gIGlzVmFsaWQgPXRydWUgOiBpc1ZhbGlkID1mYWxzZTtcblxuLy8gICAgICAgICAgcmV0dXJuIGlzVmFsaWQgPyBcIlZhbGlkXCI6XCJJbnZhbGlkXCJcbi8vICAgICB9XG5cblxuXG5cbi8vIH1cblxuXG5cbi8vIGV4cG9ydCBjb25zdCBpc2JuMTMgPSAoc3RyOiBzdHJpbmcgfCBBcnJheTxhbnk+IHwgYW55KSA9PiB7XG4vLyAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbi8vICAgICBsZXQgc3RyQ29udGFpbmVyID0gW107XG4gIFxuLy8gICAgIGxldCB3ZWlnaHRCb29sID0gZmFsc2U7XG4gIFxuLy8gICAgIGlmIChzdHIubGVuZ3RoID09PSAxMCkge1xuLy8gICAgICAgc3RyID0gXCI5NzhcIiArIHN0ci5zbGljZSgwLCA5KTtcbi8vICAgICAgIHN0ciA9IHN0ci5zcGxpdChcIlwiKTtcbiAgXG4vLyAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuLy8gICAgICAgICB3ZWlnaHRCb29sID0gIXdlaWdodEJvb2w7XG4vLyAgICAgICAgIHN0ckNvbnRhaW5lcltpbmRleF0gPSBwYXJzZUludChzdHJbaW5kZXhdKSAqICh3ZWlnaHRCb29sID8gMSA6IDMpO1xuLy8gICAgICAgfVxuICBcbi8vICAgICAgIGxldCBzdW0gPSBzdHJDb250YWluZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG4vLyAgICAgICBsZXQgY2hlY2tEaWdpdCA9ICgxMCAtIChzdW0gJSAxMCkpICUgMTA7XG4vLyAgICAgICBzdHIgPSBzdHIuam9pbihcIlwiKS5yZXBsYWNlKC8sL2csIFwiXCIpO1xuICBcbi8vICAgICAgIHJldHVybiBzdW0gJSAxMCAhPT0gMCA/IHN0ciArIGNoZWNrRGlnaXQudG9TdHJpbmcoKSA6IFwiSW52YWxpZFwiO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIik7XG4gIFxuLy8gICAgICAgaWYgKHN0cltzdHIubGVuZ3RoIC0gMV0udG9VcHBlckNhc2UoKSA9PT0gJ1gnKSB7XG4vLyAgICAgICAgIHN0cltzdHIubGVuZ3RoIC0gMV0gPSAnMTAnO1xuLy8gICAgICAgfVxuICBcbi8vICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4vLyAgICAgICAgIHdlaWdodEJvb2wgPSAhd2VpZ2h0Qm9vbDtcbi8vICAgICAgICAgc3RyQ29udGFpbmVyW2luZGV4XSA9IHBhcnNlSW50KHN0cltpbmRleF0pICogKHdlaWdodEJvb2wgPyAxIDogMyk7XG4vLyAgICAgICB9XG4gIFxuLy8gICAgICAgbGV0IHN1bSA9IHN0ckNvbnRhaW5lci5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbi8vICAgICAgIGlzVmFsaWQgPSBzdW0gJSAxMCA9PT0gMDtcbiAgXG4vLyAgICAgICByZXR1cm4gaXNWYWxpZCA/IFwiVmFsaWRcIiA6IFwiSW52YWxpZFwiO1xuLy8gICAgIH1cbi8vICAgfTtcblxuXG5leHBvcnQgY29uc3QgaXNibjEzID0gKHN0cjogc3RyaW5nIHwgQXJyYXk8YW55PiB8IGFueSkgPT4ge1xuICAgIGlmIChzdHIubGVuZ3RoID09PSAxMCkge1xuICAgICAgc3RyID0gXCI5NzhcIiArIHN0ci5zbGljZSgwLCA5KTtcbiAgICB9XG4gIFxuICAgIGlmIChzdHIubGVuZ3RoICE9PSAxMykge1xuICAgICAgcmV0dXJuIFwiSW52YWxpZFwiO1xuICAgIH1cbiAgXG4gICAgbGV0IHN1bSA9IDA7XG4gICAgbGV0IHdlaWdodCA9IDE7XG4gIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgY29uc3QgZGlnaXQgPSBwYXJzZUludChzdHJbaV0pO1xuICAgICAgaWYgKGlzTmFOKGRpZ2l0KSkge1xuICAgICAgICByZXR1cm4gXCJJbnZhbGlkXCI7XG4gICAgICB9XG4gICAgICBzdW0gKz0gZGlnaXQgKiB3ZWlnaHQ7XG4gICAgICB3ZWlnaHQgPSAod2VpZ2h0ID09PSAxKSA/IDMgOiAxO1xuICAgIH1cbiAgXG4gICAgY29uc3QgY2FsY3VsYXRlZENoZWNrRGlnaXQgPSAoMTAgLSAoc3VtICUgMTApKSAlIDEwO1xuICAgIGNvbnN0IGFjdHVhbENoZWNrRGlnaXQgPSBwYXJzZUludChzdHJbc3RyLmxlbmd0aCAtIDFdKTtcbiAgY29uc29sZS5sb2coYWN0dWFsQ2hlY2tEaWdpdCtcIiBcIitjYWxjdWxhdGVkQ2hlY2tEaWdpdCk7XG4gIFxuICAgIGlmIChpc05hTihhY3R1YWxDaGVja0RpZ2l0KSkge1xuICAgICAgcmV0dXJuIFwiSW52YWxpZFwiO1xuICAgIH1cbiAgXG4gICAgcmV0dXJuIGNhbGN1bGF0ZWRDaGVja0RpZ2l0ID09PSBhY3R1YWxDaGVja0RpZ2l0ID8gXCJWYWxpZFwiIDogXCJJbnZhbGlkXCI7XG4gIH07XG4gICJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,