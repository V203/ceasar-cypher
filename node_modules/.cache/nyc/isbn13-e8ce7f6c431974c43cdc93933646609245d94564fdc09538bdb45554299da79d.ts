"use strict";function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="3682ed69d69ab198a3e924c592673798a0f6f3ff";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:24}},"2":{start:{line:4,column:15},end:{line:62,column:1}},"3":{start:{line:5,column:18},end:{line:5,column:23}},"4":{start:{line:6,column:18},end:{line:6,column:23}},"5":{start:{line:7,column:4},end:{line:61,column:5}},"6":{start:{line:8,column:8},end:{line:8,column:28}},"7":{start:{line:9,column:8},end:{line:9,column:94}},"8":{start:{line:9,column:30},end:{line:9,column:42}},"9":{start:{line:9,column:63},end:{line:9,column:92}},"10":{start:{line:10,column:8},end:{line:10,column:60}},"11":{start:{line:10,column:39},end:{line:10,column:44}},"12":{start:{line:11,column:8},end:{line:11,column:45}},"13":{start:{line:13,column:9},end:{line:61,column:5}},"14":{start:{line:15,column:26},end:{line:15,column:28}},"15":{start:{line:16,column:8},end:{line:16,column:43}},"16":{start:{line:17,column:8},end:{line:17,column:28}},"17":{start:{line:18,column:8},end:{line:18,column:70}},"18":{start:{line:19,column:8},end:{line:32,column:9}},"19":{start:{line:19,column:28},end:{line:19,column:56}},"20":{start:{line:19,column:75},end:{line:19,column:80}},"21":{start:{line:22,column:33},end:{line:22,column:38}},"22":{start:{line:24,column:27},end:{line:24,column:45}},"23":{start:{line:27,column:31},end:{line:27,column:58}},"24":{start:{line:28,column:12},end:{line:28,column:39}},"25":{start:{line:31,column:12},end:{line:31,column:29}},"26":{start:{line:63,column:0},end:{line:63,column:24}},"27":{start:{line:64,column:28},end:{line:73,column:1}},"28":{start:{line:65,column:23},end:{line:65,column:49}},"29":{start:{line:67,column:27},end:{line:67,column:94}},"30":{start:{line:67,column:60},end:{line:67,column:93}},"31":{start:{line:69,column:16},end:{line:69,column:54}},"32":{start:{line:69,column:48},end:{line:69,column:53}},"33":{start:{line:71,column:23},end:{line:71,column:45}},"34":{start:{line:72,column:4},end:{line:72,column:33}},"35":{start:{line:77,column:26},end:{line:88,column:1}},"36":{start:{line:79,column:4},end:{line:79,column:38}},"37":{start:{line:81,column:25},end:{line:81,column:30}},"38":{start:{line:83,column:19},end:{line:83,column:53}},"39":{start:{line:86,column:23},end:{line:86,column:50}},"40":{start:{line:87,column:4},end:{line:87,column:31}},"41":{start:{line:89,column:0},end:{line:89,column:45}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:15},end:{line:4,column:16}},loc:{start:{line:4,column:24},end:{line:62,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:22},end:{line:9,column:23}},loc:{start:{line:9,column:30},end:{line:9,column:42}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:48},end:{line:9,column:49}},loc:{start:{line:9,column:63},end:{line:9,column:92}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:10,column:29},end:{line:10,column:30}},loc:{start:{line:10,column:39},end:{line:10,column:44}},line:10},"4":{name:"(anonymous_4)",decl:{start:{line:19,column:20},end:{line:19,column:21}},loc:{start:{line:19,column:28},end:{line:19,column:56}},line:19},"5":{name:"(anonymous_5)",decl:{start:{line:19,column:65},end:{line:19,column:66}},loc:{start:{line:19,column:75},end:{line:19,column:80}},line:19},"6":{name:"(anonymous_6)",decl:{start:{line:64,column:28},end:{line:64,column:29}},loc:{start:{line:64,column:38},end:{line:73,column:1}},line:64},"7":{name:"(anonymous_7)",decl:{start:{line:67,column:42},end:{line:67,column:43}},loc:{start:{line:67,column:60},end:{line:67,column:93}},line:67},"8":{name:"(anonymous_8)",decl:{start:{line:69,column:38},end:{line:69,column:39}},loc:{start:{line:69,column:48},end:{line:69,column:53}},line:69},"9":{name:"(anonymous_9)",decl:{start:{line:77,column:26},end:{line:77,column:27}},loc:{start:{line:77,column:38},end:{line:88,column:1}},line:77}},branchMap:{"0":{loc:{start:{line:7,column:4},end:{line:61,column:5}},type:"if",locations:[{start:{line:7,column:4},end:{line:61,column:5}},{start:{line:7,column:4},end:{line:61,column:5}}],line:7},"1":{loc:{start:{line:9,column:69},end:{line:9,column:91}},type:"cond-expr",locations:[{start:{line:9,column:86},end:{line:9,column:87}},{start:{line:9,column:90},end:{line:9,column:91}}],line:9},"2":{loc:{start:{line:11,column:15},end:{line:11,column:44}},type:"cond-expr",locations:[{start:{line:11,column:25},end:{line:11,column:32}},{start:{line:11,column:35},end:{line:11,column:44}}],line:11},"3":{loc:{start:{line:13,column:9},end:{line:61,column:5}},type:"if",locations:[{start:{line:13,column:9},end:{line:61,column:5}},{start:{line:13,column:9},end:{line:61,column:5}}],line:13},"4":{loc:{start:{line:18,column:8},end:{line:18,column:69}},type:"cond-expr",locations:[{start:{line:18,column:38},end:{line:18,column:62}},{start:{line:18,column:65},end:{line:18,column:69}}],line:18},"5":{loc:{start:{line:19,column:8},end:{line:32,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:32,column:9}},{start:{line:19,column:8},end:{line:32,column:9}}],line:19},"6":{loc:{start:{line:67,column:69},end:{line:67,column:92}},type:"cond-expr",locations:[{start:{line:67,column:87},end:{line:67,column:88}},{start:{line:67,column:91},end:{line:67,column:92}}],line:67}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:"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",sourcesContent:["export const isbn13 = (str: string | Array<any> | any) => {\n    let i13Bool = false\n    let isValid = false;\n    if (str.length === 13) {\n        str = str.split(\"\");\n        str = str.map((el: any) => parseInt(el)).map((el: any, index: any) => el * (index % 2 == 0 ? 1 : 3));\n        isValid = str.reduce((a: any, b: any) => a + b, 0) % 10 === 0;\n        return isValid ? \"Valid\" : \"Invalid\";\n\n    } else if (str.length === 10  ) {\n         // Remove any hyphens from ISBN-10\n         let counterFake = 10;\n         console.log(str.replace(/X/g, 10));\n         str = str.split(\"\")\n        str[str.length-1] === \"X\" ? str[str.length-1] = 10 :null;\n\n        if( str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0){\n\n            // str = str.replace(/X/g, '');\n          \n            // Add the prefix \"978\" to the beginning\n            const isbn13Prefix = \"978\";\n            // console.log(str.slice(0, -1));\n            \n            const isbn13 = isbn13Prefix + str\n        //   console.log(isbn13);\n          \n            // Calculate the check digit for ISBN-13\n            const checkDigit = calculateCheckDigit(isbn13);\n          \n            return isbn13 + checkDigit;\n        }else{\n            return \"Invalid\"\n        }\n        // let counterFake = 11;\n        // let weightBool = false\n        // if (str.split(\"\").map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0) {\n        //     var strContainer:Array<any> = [];\n        //     // console.log(str);\n        //     str = \"978\" + str\n            \n        //     str = str.split(\"\");\n        //     // console.log(str.length);\n            \n        //     for (let index = 0; index < str.length; index++) {\n        //         weightBool = !weightBool;\n        //         strContainer[index] = (parseInt(str[index]) * (weightBool ? 1 : 3));\n        //     }\n        //     // console.log(strContainer);\n            \n        //     let sum = strContainer.reduce((a, b) => a + b);\n        //     // console.log(sum)\n        //     let checkDigit = (10 - (sum % 10)) % 10 ;\n        //     // console.log(checkDigit);\n        //     // console.log(str);\n        //     str = str.join(\"\").replace(/,/g, \"\");\n        //     // str + checkDigit.toString()\n        //     str + calculateCheckDigit(str)\n        //  return   str+ checkDigit.toString()\n        // } else {\n        //     return \"Invalid\"\n        // }\n\n\n        // console.log(str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b));\n\n        // console.log(strContainer.reduce((a: any, b: any) => a + b) % 10 === 0);\n\n        // console.log(sum);\n\n\n\n\n    }\n\n\n\n};\nconst calculateCheckDigit = (isbn: string) => {\n    const digitArray = isbn.split(\"\").map(Number); // Convert ISBN string to an array of digits\n  \n    // Multiply each digit by its corresponding weight (1 or 3)\n    const weightedDigits = digitArray.map((digit: number, index: number) => digit * (index % 2 === 0 ? 1 : 3));\n  \n    // Calculate the sum of all the weighted digits\n    const sum = weightedDigits.reduce((a, b) => a + b);\n  \n    // Calculate the check digit\n    const checkDigit = (10 - (sum % 10)) % 10;\n  \n    return checkDigit.toString()\n}\n\n// console.log(isbn13(\"3866155239\"))\n\n// console.log(isbn13(\"3866155237\"))\n\n// console.log(calculateCheckDigit(\"9783866155237\"));\n\n\nconst convertISBN10to13 = (isbn10: string) => {\n    // Remove any hyphens from ISBN-10\n    isbn10 = isbn10.replace(/-/g, '');\n  \n    // Add the prefix \"978\" to the beginning\n    const isbn13Prefix = \"978\";\n    // console.log(isbn10.slice(0, -1));\n    \n    const isbn13 = isbn13Prefix + isbn10.slice(0, -1);\n//   console.log(isbn13);\n  \n    // Calculate the check digit for ISBN-13\n    const checkDigit = calculateCheckDigit(isbn13);\n  \n    return isbn13 + checkDigit;\n  }\n\n\n  console.log(convertISBN10to13(\"817450494X\"));\n  "]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3682ed69d69ab198a3e924c592673798a0f6f3ff"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;let i13Bool=(cov_1az1wpajte().s[3]++,false);let isValid=(cov_1az1wpajte().s[4]++,false);cov_1az1wpajte().s[5]++;if(str.length===13){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[6]++;str=str.split("");cov_1az1wpajte().s[7]++;str=str.map(el=>{cov_1az1wpajte().f[1]++;cov_1az1wpajte().s[8]++;return parseInt(el);}).map((el,index)=>{cov_1az1wpajte().f[2]++;cov_1az1wpajte().s[9]++;return el*(index%2==0?(cov_1az1wpajte().b[1][0]++,1):(cov_1az1wpajte().b[1][1]++,3));});cov_1az1wpajte().s[10]++;isValid=str.reduce((a,b)=>{cov_1az1wpajte().f[3]++;cov_1az1wpajte().s[11]++;return a+b;},0)%10===0;cov_1az1wpajte().s[12]++;return isValid?(cov_1az1wpajte().b[2][0]++,"Valid"):(cov_1az1wpajte().b[2][1]++,"Invalid");}else{cov_1az1wpajte().b[0][1]++;cov_1az1wpajte().s[13]++;if(str.length===10){cov_1az1wpajte().b[3][0]++;// Remove any hyphens from ISBN-10
let counterFake=(cov_1az1wpajte().s[14]++,10);cov_1az1wpajte().s[15]++;console.log(str.replace(/X/g,10));cov_1az1wpajte().s[16]++;str=str.split("");cov_1az1wpajte().s[17]++;str[str.length-1]==="X"?(cov_1az1wpajte().b[4][0]++,str[str.length-1]=10):(cov_1az1wpajte().b[4][1]++,null);cov_1az1wpajte().s[18]++;if(str.map(el=>{cov_1az1wpajte().f[4]++;cov_1az1wpajte().s[19]++;return parseInt(el)*counterFake--;}).reduce((a,b)=>{cov_1az1wpajte().f[5]++;cov_1az1wpajte().s[20]++;return a+b;})%11===0){cov_1az1wpajte().b[5][0]++;// str = str.replace(/X/g, '');
// Add the prefix "978" to the beginning
const isbn13Prefix=(cov_1az1wpajte().s[21]++,"978");// console.log(str.slice(0, -1));
const isbn13=(cov_1az1wpajte().s[22]++,isbn13Prefix+str);//   console.log(isbn13);
// Calculate the check digit for ISBN-13
const checkDigit=(cov_1az1wpajte().s[23]++,calculateCheckDigit(isbn13));cov_1az1wpajte().s[24]++;return isbn13+checkDigit;}else{cov_1az1wpajte().b[5][1]++;cov_1az1wpajte().s[25]++;return"Invalid";}// let counterFake = 11;
// let weightBool = false
// if (str.split("").map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0) {
//     var strContainer:Array<any> = [];
//     // console.log(str);
//     str = "978" + str
//     str = str.split("");
//     // console.log(str.length);
//     for (let index = 0; index < str.length; index++) {
//         weightBool = !weightBool;
//         strContainer[index] = (parseInt(str[index]) * (weightBool ? 1 : 3));
//     }
//     // console.log(strContainer);
//     let sum = strContainer.reduce((a, b) => a + b);
//     // console.log(sum)
//     let checkDigit = (10 - (sum % 10)) % 10 ;
//     // console.log(checkDigit);
//     // console.log(str);
//     str = str.join("").replace(/,/g, "");
//     // str + checkDigit.toString()
//     str + calculateCheckDigit(str)
//  return   str+ checkDigit.toString()
// } else {
//     return "Invalid"
// }
// console.log(str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b));
// console.log(strContainer.reduce((a: any, b: any) => a + b) % 10 === 0);
// console.log(sum);
}else{cov_1az1wpajte().b[3][1]++;}}};cov_1az1wpajte().s[26]++;exports.isbn13=isbn13;cov_1az1wpajte().s[27]++;const calculateCheckDigit=isbn=>{cov_1az1wpajte().f[6]++;const digitArray=(cov_1az1wpajte().s[28]++,isbn.split("").map(Number));// Convert ISBN string to an array of digits
// Multiply each digit by its corresponding weight (1 or 3)
const weightedDigits=(cov_1az1wpajte().s[29]++,digitArray.map((digit,index)=>{cov_1az1wpajte().f[7]++;cov_1az1wpajte().s[30]++;return digit*(index%2===0?(cov_1az1wpajte().b[6][0]++,1):(cov_1az1wpajte().b[6][1]++,3));}));// Calculate the sum of all the weighted digits
const sum=(cov_1az1wpajte().s[31]++,weightedDigits.reduce((a,b)=>{cov_1az1wpajte().f[8]++;cov_1az1wpajte().s[32]++;return a+b;}));// Calculate the check digit
const checkDigit=(cov_1az1wpajte().s[33]++,(10-sum%10)%10);cov_1az1wpajte().s[34]++;return checkDigit.toString();};// console.log(isbn13("3866155239"))
// console.log(isbn13("3866155237"))
// console.log(calculateCheckDigit("9783866155237"));
cov_1az1wpajte().s[35]++;const convertISBN10to13=isbn10=>{cov_1az1wpajte().f[9]++;cov_1az1wpajte().s[36]++;// Remove any hyphens from ISBN-10
isbn10=isbn10.replace(/-/g,'');// Add the prefix "978" to the beginning
const isbn13Prefix=(cov_1az1wpajte().s[37]++,"978");// console.log(isbn10.slice(0, -1));
const isbn13=(cov_1az1wpajte().s[38]++,isbn13Prefix+isbn10.slice(0,-1));//   console.log(isbn13);
// Calculate the check digit for ISBN-13
const checkDigit=(cov_1az1wpajte().s[39]++,calculateCheckDigit(isbn13));cov_1az1wpajte().s[40]++;return isbn13+checkDigit;};cov_1az1wpajte().s[41]++;console.log(convertISBN10to13("817450494X"));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWF6MXdwYWp0ZSIsImFjdHVhbENvdmVyYWdlIiwicyIsImlzYm4xMyIsInN0ciIsImYiLCJpMTNCb29sIiwiaXNWYWxpZCIsImxlbmd0aCIsImIiLCJzcGxpdCIsIm1hcCIsImVsIiwicGFyc2VJbnQiLCJpbmRleCIsInJlZHVjZSIsImEiLCJjb3VudGVyRmFrZSIsImNvbnNvbGUiLCJsb2ciLCJyZXBsYWNlIiwiaXNibjEzUHJlZml4IiwiY2hlY2tEaWdpdCIsImNhbGN1bGF0ZUNoZWNrRGlnaXQiLCJleHBvcnRzIiwiaXNibiIsImRpZ2l0QXJyYXkiLCJOdW1iZXIiLCJ3ZWlnaHRlZERpZ2l0cyIsImRpZ2l0Iiwic3VtIiwidG9TdHJpbmciLCJjb252ZXJ0SVNCTjEwdG8xMyIsImlzYm4xMCIsInNsaWNlIl0sInNvdXJjZXMiOlsiL2hvbWUvY29kZXgtY29kZXIvRG9jdW1lbnRzL3Byb2plY3RzL2NlYXNhci1jeXBoZXIvaXNibjEzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc2JuMTMgPSAoc3RyOiBzdHJpbmcgfCBBcnJheTxhbnk+IHwgYW55KSA9PiB7XG4gICAgbGV0IGkxM0Jvb2wgPSBmYWxzZVxuICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDEzKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zcGxpdChcIlwiKTtcbiAgICAgICAgc3RyID0gc3RyLm1hcCgoZWw6IGFueSkgPT4gcGFyc2VJbnQoZWwpKS5tYXAoKGVsOiBhbnksIGluZGV4OiBhbnkpID0+IGVsICogKGluZGV4ICUgMiA9PSAwID8gMSA6IDMpKTtcbiAgICAgICAgaXNWYWxpZCA9IHN0ci5yZWR1Y2UoKGE6IGFueSwgYjogYW55KSA9PiBhICsgYiwgMCkgJSAxMCA9PT0gMDtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQgPyBcIlZhbGlkXCIgOiBcIkludmFsaWRcIjtcblxuICAgIH0gZWxzZSBpZiAoc3RyLmxlbmd0aCA9PT0gMTAgICkge1xuICAgICAgICAgLy8gUmVtb3ZlIGFueSBoeXBoZW5zIGZyb20gSVNCTi0xMFxuICAgICAgICAgbGV0IGNvdW50ZXJGYWtlID0gMTA7XG4gICAgICAgICBjb25zb2xlLmxvZyhzdHIucmVwbGFjZSgvWC9nLCAxMCkpO1xuICAgICAgICAgc3RyID0gc3RyLnNwbGl0KFwiXCIpXG4gICAgICAgIHN0cltzdHIubGVuZ3RoLTFdID09PSBcIlhcIiA/IHN0cltzdHIubGVuZ3RoLTFdID0gMTAgOm51bGw7XG5cbiAgICAgICAgaWYoIHN0ci5tYXAoKGVsOiBhbnkpID0+IHBhcnNlSW50KGVsKSAqIGNvdW50ZXJGYWtlLS0pLnJlZHVjZSgoYTogYW55LCBiOiBhbnkpID0+IGEgKyBiKSAlIDExID09PSAwKXtcblxuICAgICAgICAgICAgLy8gc3RyID0gc3RyLnJlcGxhY2UoL1gvZywgJycpO1xuICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHRoZSBwcmVmaXggXCI5NzhcIiB0byB0aGUgYmVnaW5uaW5nXG4gICAgICAgICAgICBjb25zdCBpc2JuMTNQcmVmaXggPSBcIjk3OFwiO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGlzYm4xMyA9IGlzYm4xM1ByZWZpeCArIHN0clxuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGlzYm4xMyk7XG4gICAgICAgICAgXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGNoZWNrIGRpZ2l0IGZvciBJU0JOLTEzXG4gICAgICAgICAgICBjb25zdCBjaGVja0RpZ2l0ID0gY2FsY3VsYXRlQ2hlY2tEaWdpdChpc2JuMTMpO1xuICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGlzYm4xMyArIGNoZWNrRGlnaXQ7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIFwiSW52YWxpZFwiXG4gICAgICAgIH1cbiAgICAgICAgLy8gbGV0IGNvdW50ZXJGYWtlID0gMTE7XG4gICAgICAgIC8vIGxldCB3ZWlnaHRCb29sID0gZmFsc2VcbiAgICAgICAgLy8gaWYgKHN0ci5zcGxpdChcIlwiKS5tYXAoKGVsOiBhbnkpID0+IHBhcnNlSW50KGVsKSAqIGNvdW50ZXJGYWtlLS0pLnJlZHVjZSgoYTogYW55LCBiOiBhbnkpID0+IGEgKyBiKSAlIDExID09PSAwKSB7XG4gICAgICAgIC8vICAgICB2YXIgc3RyQ29udGFpbmVyOkFycmF5PGFueT4gPSBbXTtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHN0cik7XG4gICAgICAgIC8vICAgICBzdHIgPSBcIjk3OFwiICsgc3RyXG4gICAgICAgICAgICBcbiAgICAgICAgLy8gICAgIHN0ciA9IHN0ci5zcGxpdChcIlwiKTtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgXG4gICAgICAgIC8vICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAvLyAgICAgICAgIHdlaWdodEJvb2wgPSAhd2VpZ2h0Qm9vbDtcbiAgICAgICAgLy8gICAgICAgICBzdHJDb250YWluZXJbaW5kZXhdID0gKHBhcnNlSW50KHN0cltpbmRleF0pICogKHdlaWdodEJvb2wgPyAxIDogMykpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coc3RyQ29udGFpbmVyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgbGV0IHN1bSA9IHN0ckNvbnRhaW5lci5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHN1bSlcbiAgICAgICAgLy8gICAgIGxldCBjaGVja0RpZ2l0ID0gKDEwIC0gKHN1bSAlIDEwKSkgJSAxMCA7XG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhjaGVja0RpZ2l0KTtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHN0cik7XG4gICAgICAgIC8vICAgICBzdHIgPSBzdHIuam9pbihcIlwiKS5yZXBsYWNlKC8sL2csIFwiXCIpO1xuICAgICAgICAvLyAgICAgLy8gc3RyICsgY2hlY2tEaWdpdC50b1N0cmluZygpXG4gICAgICAgIC8vICAgICBzdHIgKyBjYWxjdWxhdGVDaGVja0RpZ2l0KHN0cilcbiAgICAgICAgLy8gIHJldHVybiAgIHN0cisgY2hlY2tEaWdpdC50b1N0cmluZygpXG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICByZXR1cm4gXCJJbnZhbGlkXCJcbiAgICAgICAgLy8gfVxuXG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coc3RyLm1hcCgoZWw6IGFueSkgPT4gcGFyc2VJbnQoZWwpICogY291bnRlckZha2UtLSkucmVkdWNlKChhOiBhbnksIGI6IGFueSkgPT4gYSArIGIpKTtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHJDb250YWluZXIucmVkdWNlKChhOiBhbnksIGI6IGFueSkgPT4gYSArIGIpICUgMTAgPT09IDApO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN1bSk7XG5cblxuXG5cbiAgICB9XG5cblxuXG59O1xuY29uc3QgY2FsY3VsYXRlQ2hlY2tEaWdpdCA9IChpc2JuOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBkaWdpdEFycmF5ID0gaXNibi5zcGxpdChcIlwiKS5tYXAoTnVtYmVyKTsgLy8gQ29udmVydCBJU0JOIHN0cmluZyB0byBhbiBhcnJheSBvZiBkaWdpdHNcbiAgXG4gICAgLy8gTXVsdGlwbHkgZWFjaCBkaWdpdCBieSBpdHMgY29ycmVzcG9uZGluZyB3ZWlnaHQgKDEgb3IgMylcbiAgICBjb25zdCB3ZWlnaHRlZERpZ2l0cyA9IGRpZ2l0QXJyYXkubWFwKChkaWdpdDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSA9PiBkaWdpdCAqIChpbmRleCAlIDIgPT09IDAgPyAxIDogMykpO1xuICBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIHN1bSBvZiBhbGwgdGhlIHdlaWdodGVkIGRpZ2l0c1xuICAgIGNvbnN0IHN1bSA9IHdlaWdodGVkRGlnaXRzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xuICBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNoZWNrIGRpZ2l0XG4gICAgY29uc3QgY2hlY2tEaWdpdCA9ICgxMCAtIChzdW0gJSAxMCkpICUgMTA7XG4gIFxuICAgIHJldHVybiBjaGVja0RpZ2l0LnRvU3RyaW5nKClcbn1cblxuLy8gY29uc29sZS5sb2coaXNibjEzKFwiMzg2NjE1NTIzOVwiKSlcblxuLy8gY29uc29sZS5sb2coaXNibjEzKFwiMzg2NjE1NTIzN1wiKSlcblxuLy8gY29uc29sZS5sb2coY2FsY3VsYXRlQ2hlY2tEaWdpdChcIjk3ODM4NjYxNTUyMzdcIikpO1xuXG5cbmNvbnN0IGNvbnZlcnRJU0JOMTB0bzEzID0gKGlzYm4xMDogc3RyaW5nKSA9PiB7XG4gICAgLy8gUmVtb3ZlIGFueSBoeXBoZW5zIGZyb20gSVNCTi0xMFxuICAgIGlzYm4xMCA9IGlzYm4xMC5yZXBsYWNlKC8tL2csICcnKTtcbiAgXG4gICAgLy8gQWRkIHRoZSBwcmVmaXggXCI5NzhcIiB0byB0aGUgYmVnaW5uaW5nXG4gICAgY29uc3QgaXNibjEzUHJlZml4ID0gXCI5NzhcIjtcbiAgICAvLyBjb25zb2xlLmxvZyhpc2JuMTAuc2xpY2UoMCwgLTEpKTtcbiAgICBcbiAgICBjb25zdCBpc2JuMTMgPSBpc2JuMTNQcmVmaXggKyBpc2JuMTAuc2xpY2UoMCwgLTEpO1xuLy8gICBjb25zb2xlLmxvZyhpc2JuMTMpO1xuICBcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNoZWNrIGRpZ2l0IGZvciBJU0JOLTEzXG4gICAgY29uc3QgY2hlY2tEaWdpdCA9IGNhbGN1bGF0ZUNoZWNrRGlnaXQoaXNibjEzKTtcbiAgXG4gICAgcmV0dXJuIGlzYm4xMyArIGNoZWNrRGlnaXQ7XG4gIH1cblxuXG4gIGNvbnNvbGUubG9nKGNv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