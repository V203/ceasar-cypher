"use strict";function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="3f9a3675ed044e3702bbdc1ffcf71c01e168d26f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:24}},"2":{start:{line:4,column:15},end:{line:59,column:1}},"3":{start:{line:5,column:18},end:{line:5,column:23}},"4":{start:{line:6,column:18},end:{line:6,column:23}},"5":{start:{line:7,column:4},end:{line:58,column:5}},"6":{start:{line:8,column:8},end:{line:8,column:28}},"7":{start:{line:9,column:8},end:{line:9,column:94}},"8":{start:{line:9,column:30},end:{line:9,column:42}},"9":{start:{line:9,column:63},end:{line:9,column:92}},"10":{start:{line:10,column:8},end:{line:10,column:60}},"11":{start:{line:10,column:39},end:{line:10,column:44}},"12":{start:{line:11,column:8},end:{line:11,column:45}},"13":{start:{line:13,column:9},end:{line:58,column:5}},"14":{start:{line:15,column:26},end:{line:15,column:28}},"15":{start:{line:16,column:8},end:{line:29,column:9}},"16":{start:{line:16,column:38},end:{line:16,column:86}},"17":{start:{line:16,column:105},end:{line:16,column:110}},"18":{start:{line:17,column:12},end:{line:17,column:40}},"19":{start:{line:19,column:33},end:{line:19,column:38}},"20":{start:{line:21,column:27},end:{line:21,column:58}},"21":{start:{line:24,column:31},end:{line:24,column:58}},"22":{start:{line:25,column:12},end:{line:25,column:39}},"23":{start:{line:28,column:12},end:{line:28,column:29}},"24":{start:{line:60,column:0},end:{line:60,column:24}},"25":{start:{line:61,column:28},end:{line:70,column:1}},"26":{start:{line:62,column:23},end:{line:62,column:49}},"27":{start:{line:64,column:27},end:{line:64,column:94}},"28":{start:{line:64,column:60},end:{line:64,column:93}},"29":{start:{line:66,column:16},end:{line:66,column:54}},"30":{start:{line:66,column:48},end:{line:66,column:53}},"31":{start:{line:68,column:23},end:{line:68,column:45}},"32":{start:{line:69,column:4},end:{line:69,column:33}},"33":{start:{line:74,column:26},end:{line:85,column:1}},"34":{start:{line:76,column:4},end:{line:76,column:38}},"35":{start:{line:78,column:25},end:{line:78,column:30}},"36":{start:{line:80,column:19},end:{line:80,column:53}},"37":{start:{line:83,column:23},end:{line:83,column:50}},"38":{start:{line:84,column:4},end:{line:84,column:31}},"39":{start:{line:86,column:0},end:{line:86,column:45}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:15},end:{line:4,column:16}},loc:{start:{line:4,column:24},end:{line:59,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:22},end:{line:9,column:23}},loc:{start:{line:9,column:30},end:{line:9,column:42}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:48},end:{line:9,column:49}},loc:{start:{line:9,column:63},end:{line:9,column:92}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:10,column:29},end:{line:10,column:30}},loc:{start:{line:10,column:39},end:{line:10,column:44}},line:10},"4":{name:"(anonymous_4)",decl:{start:{line:16,column:30},end:{line:16,column:31}},loc:{start:{line:16,column:38},end:{line:16,column:86}},line:16},"5":{name:"(anonymous_5)",decl:{start:{line:16,column:95},end:{line:16,column:96}},loc:{start:{line:16,column:105},end:{line:16,column:110}},line:16},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:28},end:{line:61,column:29}},loc:{start:{line:61,column:38},end:{line:70,column:1}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:64,column:42},end:{line:64,column:43}},loc:{start:{line:64,column:60},end:{line:64,column:93}},line:64},"8":{name:"(anonymous_8)",decl:{start:{line:66,column:38},end:{line:66,column:39}},loc:{start:{line:66,column:48},end:{line:66,column:53}},line:66},"9":{name:"(anonymous_9)",decl:{start:{line:74,column:26},end:{line:74,column:27}},loc:{start:{line:74,column:38},end:{line:85,column:1}},line:74}},branchMap:{"0":{loc:{start:{line:7,column:4},end:{line:58,column:5}},type:"if",locations:[{start:{line:7,column:4},end:{line:58,column:5}},{start:{line:7,column:4},end:{line:58,column:5}}],line:7},"1":{loc:{start:{line:9,column:69},end:{line:9,column:91}},type:"cond-expr",locations:[{start:{line:9,column:86},end:{line:9,column:87}},{start:{line:9,column:90},end:{line:9,column:91}}],line:9},"2":{loc:{start:{line:11,column:15},end:{line:11,column:44}},type:"cond-expr",locations:[{start:{line:11,column:25},end:{line:11,column:32}},{start:{line:11,column:35},end:{line:11,column:44}}],line:11},"3":{loc:{start:{line:13,column:9},end:{line:58,column:5}},type:"if",locations:[{start:{line:13,column:9},end:{line:58,column:5}},{start:{line:13,column:9},end:{line:58,column:5}}],line:13},"4":{loc:{start:{line:16,column:8},end:{line:29,column:9}},type:"if",locations:[{start:{line:16,column:8},end:{line:29,column:9}},{start:{line:16,column:8},end:{line:29,column:9}}],line:16},"5":{loc:{start:{line:16,column:38},end:{line:16,column:86}},type:"cond-expr",locations:[{start:{line:16,column:53},end:{line:16,column:65}},{start:{line:16,column:68},end:{line:16,column:86}}],line:16},"6":{loc:{start:{line:64,column:69},end:{line:64,column:92}},type:"cond-expr",locations:[{start:{line:64,column:87},end:{line:64,column:88}},{start:{line:64,column:91},end:{line:64,column:92}}],line:64}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:"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",sourcesContent:["export const isbn13 = (str: string | Array<any> | any) => {\n    let i13Bool = false\n    let isValid = false;\n    if (str.length === 13) {\n        str = str.split(\"\");\n        str = str.map((el: any) => parseInt(el)).map((el: any, index: any) => el * (index % 2 == 0 ? 1 : 3));\n        isValid = str.reduce((a: any, b: any) => a + b, 0) % 10 === 0;\n        return isValid ? \"Valid\" : \"Invalid\";\n\n    } else if (str.length === 10  ) {\n         // Remove any hyphens from ISBN-10\n         let counterFake = 10;\n         \n\n        if( str.split(\"\").map((el: any) => (el !== \"X\")  ? parseInt(el):10 * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0){\n\n            str = str.replace(/X/g, '');\n          \n            // Add the prefix \"978\" to the beginning\n            const isbn13Prefix = \"978\";\n            // console.log(str.slice(0, -1));\n            \n            const isbn13 = isbn13Prefix + str.slice(0, -1);\n        //   console.log(isbn13);\n          \n            // Calculate the check digit for ISBN-13\n            const checkDigit = calculateCheckDigit(isbn13);\n          \n            return isbn13 + checkDigit;\n        }else{\n            return \"Invalid\"\n        }\n        // let counterFake = 11;\n        // let weightBool = false\n        // if (str.split(\"\").map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0) {\n        //     var strContainer:Array<any> = [];\n        //     // console.log(str);\n        //     str = \"978\" + str\n            \n        //     str = str.split(\"\");\n        //     // console.log(str.length);\n            \n        //     for (let index = 0; index < str.length; index++) {\n        //         weightBool = !weightBool;\n        //         strContainer[index] = (parseInt(str[index]) * (weightBool ? 1 : 3));\n        //     }\n        //     // console.log(strContainer);\n            \n        //     let sum = strContainer.reduce((a, b) => a + b);\n        //     // console.log(sum)\n        //     let checkDigit = (10 - (sum % 10)) % 10 ;\n        //     // console.log(checkDigit);\n        //     // console.log(str);\n        //     str = str.join(\"\").replace(/,/g, \"\");\n        //     // str + checkDigit.toString()\n        //     str + calculateCheckDigit(str)\n        //  return   str+ checkDigit.toString()\n        // } else {\n        //     return \"Invalid\"\n        // }\n\n\n        // console.log(str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b));\n\n        // console.log(strContainer.reduce((a: any, b: any) => a + b) % 10 === 0);\n\n        // console.log(sum);\n\n\n\n\n    }\n\n\n\n};\nconst calculateCheckDigit = (isbn: string) => {\n    const digitArray = isbn.split(\"\").map(Number); // Convert ISBN string to an array of digits\n  \n    // Multiply each digit by its corresponding weight (1 or 3)\n    const weightedDigits = digitArray.map((digit: number, index: number) => digit * (index % 2 === 0 ? 1 : 3));\n  \n    // Calculate the sum of all the weighted digits\n    const sum = weightedDigits.reduce((a, b) => a + b);\n  \n    // Calculate the check digit\n    const checkDigit = (10 - (sum % 10)) % 10;\n  \n    return checkDigit.toString()\n}\n\n// console.log(isbn13(\"3866155239\"))\n\n// console.log(isbn13(\"3866155237\"))\n\n// console.log(calculateCheckDigit(\"9783866155237\"));\n\n\nconst convertISBN10to13 = (isbn10: string) => {\n    // Remove any hyphens from ISBN-10\n    isbn10 = isbn10.replace(/-/g, '');\n  \n    // Add the prefix \"978\" to the beginning\n    const isbn13Prefix = \"978\";\n    // console.log(isbn10.slice(0, -1));\n    \n    const isbn13 = isbn13Prefix + isbn10.slice(0, -1);\n//   console.log(isbn13);\n  \n    // Calculate the check digit for ISBN-13\n    const checkDigit = calculateCheckDigit(isbn13);\n  \n    return isbn13 + checkDigit;\n  }\n\n\n  console.log(convertISBN10to13(\"817450494X\"));\n  "]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3f9a3675ed044e3702bbdc1ffcf71c01e168d26f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;let i13Bool=(cov_1az1wpajte().s[3]++,false);let isValid=(cov_1az1wpajte().s[4]++,false);cov_1az1wpajte().s[5]++;if(str.length===13){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[6]++;str=str.split("");cov_1az1wpajte().s[7]++;str=str.map(el=>{cov_1az1wpajte().f[1]++;cov_1az1wpajte().s[8]++;return parseInt(el);}).map((el,index)=>{cov_1az1wpajte().f[2]++;cov_1az1wpajte().s[9]++;return el*(index%2==0?(cov_1az1wpajte().b[1][0]++,1):(cov_1az1wpajte().b[1][1]++,3));});cov_1az1wpajte().s[10]++;isValid=str.reduce((a,b)=>{cov_1az1wpajte().f[3]++;cov_1az1wpajte().s[11]++;return a+b;},0)%10===0;cov_1az1wpajte().s[12]++;return isValid?(cov_1az1wpajte().b[2][0]++,"Valid"):(cov_1az1wpajte().b[2][1]++,"Invalid");}else{cov_1az1wpajte().b[0][1]++;cov_1az1wpajte().s[13]++;if(str.length===10){cov_1az1wpajte().b[3][0]++;// Remove any hyphens from ISBN-10
let counterFake=(cov_1az1wpajte().s[14]++,10);cov_1az1wpajte().s[15]++;if(str.split("").map(el=>{cov_1az1wpajte().f[4]++;cov_1az1wpajte().s[16]++;return el!=="X"?(cov_1az1wpajte().b[5][0]++,parseInt(el)):(cov_1az1wpajte().b[5][1]++,10*counterFake--);}).reduce((a,b)=>{cov_1az1wpajte().f[5]++;cov_1az1wpajte().s[17]++;return a+b;})%11===0){cov_1az1wpajte().b[4][0]++;cov_1az1wpajte().s[18]++;str=str.replace(/X/g,'');// Add the prefix "978" to the beginning
const isbn13Prefix=(cov_1az1wpajte().s[19]++,"978");// console.log(str.slice(0, -1));
const isbn13=(cov_1az1wpajte().s[20]++,isbn13Prefix+str.slice(0,-1));//   console.log(isbn13);
// Calculate the check digit for ISBN-13
const checkDigit=(cov_1az1wpajte().s[21]++,calculateCheckDigit(isbn13));cov_1az1wpajte().s[22]++;return isbn13+checkDigit;}else{cov_1az1wpajte().b[4][1]++;cov_1az1wpajte().s[23]++;return"Invalid";}// let counterFake = 11;
// let weightBool = false
// if (str.split("").map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0) {
//     var strContainer:Array<any> = [];
//     // console.log(str);
//     str = "978" + str
//     str = str.split("");
//     // console.log(str.length);
//     for (let index = 0; index < str.length; index++) {
//         weightBool = !weightBool;
//         strContainer[index] = (parseInt(str[index]) * (weightBool ? 1 : 3));
//     }
//     // console.log(strContainer);
//     let sum = strContainer.reduce((a, b) => a + b);
//     // console.log(sum)
//     let checkDigit = (10 - (sum % 10)) % 10 ;
//     // console.log(checkDigit);
//     // console.log(str);
//     str = str.join("").replace(/,/g, "");
//     // str + checkDigit.toString()
//     str + calculateCheckDigit(str)
//  return   str+ checkDigit.toString()
// } else {
//     return "Invalid"
// }
// console.log(str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b));
// console.log(strContainer.reduce((a: any, b: any) => a + b) % 10 === 0);
// console.log(sum);
}else{cov_1az1wpajte().b[3][1]++;}}};cov_1az1wpajte().s[24]++;exports.isbn13=isbn13;cov_1az1wpajte().s[25]++;const calculateCheckDigit=isbn=>{cov_1az1wpajte().f[6]++;const digitArray=(cov_1az1wpajte().s[26]++,isbn.split("").map(Number));// Convert ISBN string to an array of digits
// Multiply each digit by its corresponding weight (1 or 3)
const weightedDigits=(cov_1az1wpajte().s[27]++,digitArray.map((digit,index)=>{cov_1az1wpajte().f[7]++;cov_1az1wpajte().s[28]++;return digit*(index%2===0?(cov_1az1wpajte().b[6][0]++,1):(cov_1az1wpajte().b[6][1]++,3));}));// Calculate the sum of all the weighted digits
const sum=(cov_1az1wpajte().s[29]++,weightedDigits.reduce((a,b)=>{cov_1az1wpajte().f[8]++;cov_1az1wpajte().s[30]++;return a+b;}));// Calculate the check digit
const checkDigit=(cov_1az1wpajte().s[31]++,(10-sum%10)%10);cov_1az1wpajte().s[32]++;return checkDigit.toString();};// console.log(isbn13("3866155239"))
// console.log(isbn13("3866155237"))
// console.log(calculateCheckDigit("9783866155237"));
cov_1az1wpajte().s[33]++;const convertISBN10to13=isbn10=>{cov_1az1wpajte().f[9]++;cov_1az1wpajte().s[34]++;// Remove any hyphens from ISBN-10
isbn10=isbn10.replace(/-/g,'');// Add the prefix "978" to the beginning
const isbn13Prefix=(cov_1az1wpajte().s[35]++,"978");// console.log(isbn10.slice(0, -1));
const isbn13=(cov_1az1wpajte().s[36]++,isbn13Prefix+isbn10.slice(0,-1));//   console.log(isbn13);
// Calculate the check digit for ISBN-13
const checkDigit=(cov_1az1wpajte().s[37]++,calculateCheckDigit(isbn13));cov_1az1wpajte().s[38]++;return isbn13+checkDigit;};cov_1az1wpajte().s[39]++;console.log(convertISBN10to13("817450494X"));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWF6MXdwYWp0ZSIsImFjdHVhbENvdmVyYWdlIiwicyIsImlzYm4xMyIsInN0ciIsImYiLCJpMTNCb29sIiwiaXNWYWxpZCIsImxlbmd0aCIsImIiLCJzcGxpdCIsIm1hcCIsImVsIiwicGFyc2VJbnQiLCJpbmRleCIsInJlZHVjZSIsImEiLCJjb3VudGVyRmFrZSIsInJlcGxhY2UiLCJpc2JuMTNQcmVmaXgiLCJzbGljZSIsImNoZWNrRGlnaXQiLCJjYWxjdWxhdGVDaGVja0RpZ2l0IiwiZXhwb3J0cyIsImlzYm4iLCJkaWdpdEFycmF5IiwiTnVtYmVyIiwid2VpZ2h0ZWREaWdpdHMiLCJkaWdpdCIsInN1bSIsInRvU3RyaW5nIiwiY29udmVydElTQk4xMHRvMTMiLCJpc2JuMTAiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiL2hvbWUvY29kZXgtY29kZXIvRG9jdW1lbnRzL3Byb2plY3RzL2NlYXNhci1jeXBoZXIvaXNibjEzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc2JuMTMgPSAoc3RyOiBzdHJpbmcgfCBBcnJheTxhbnk+IHwgYW55KSA9PiB7XG4gICAgbGV0IGkxM0Jvb2wgPSBmYWxzZVxuICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDEzKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zcGxpdChcIlwiKTtcbiAgICAgICAgc3RyID0gc3RyLm1hcCgoZWw6IGFueSkgPT4gcGFyc2VJbnQoZWwpKS5tYXAoKGVsOiBhbnksIGluZGV4OiBhbnkpID0+IGVsICogKGluZGV4ICUgMiA9PSAwID8gMSA6IDMpKTtcbiAgICAgICAgaXNWYWxpZCA9IHN0ci5yZWR1Y2UoKGE6IGFueSwgYjogYW55KSA9PiBhICsgYiwgMCkgJSAxMCA9PT0gMDtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQgPyBcIlZhbGlkXCIgOiBcIkludmFsaWRcIjtcblxuICAgIH0gZWxzZSBpZiAoc3RyLmxlbmd0aCA9PT0gMTAgICkge1xuICAgICAgICAgLy8gUmVtb3ZlIGFueSBoeXBoZW5zIGZyb20gSVNCTi0xMFxuICAgICAgICAgbGV0IGNvdW50ZXJGYWtlID0gMTA7XG4gICAgICAgICBcblxuICAgICAgICBpZiggc3RyLnNwbGl0KFwiXCIpLm1hcCgoZWw6IGFueSkgPT4gKGVsICE9PSBcIlhcIikgID8gcGFyc2VJbnQoZWwpOjEwICogY291bnRlckZha2UtLSkucmVkdWNlKChhOiBhbnksIGI6IGFueSkgPT4gYSArIGIpICUgMTEgPT09IDApe1xuXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvWC9nLCAnJyk7XG4gICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgdGhlIHByZWZpeCBcIjk3OFwiIHRvIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICAgIGNvbnN0IGlzYm4xM1ByZWZpeCA9IFwiOTc4XCI7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHIuc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgaXNibjEzID0gaXNibjEzUHJlZml4ICsgc3RyLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhpc2JuMTMpO1xuICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBjaGVjayBkaWdpdCBmb3IgSVNCTi0xM1xuICAgICAgICAgICAgY29uc3QgY2hlY2tEaWdpdCA9IGNhbGN1bGF0ZUNoZWNrRGlnaXQoaXNibjEzKTtcbiAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpc2JuMTMgKyBjaGVja0RpZ2l0O1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBcIkludmFsaWRcIlxuICAgICAgICB9XG4gICAgICAgIC8vIGxldCBjb3VudGVyRmFrZSA9IDExO1xuICAgICAgICAvLyBsZXQgd2VpZ2h0Qm9vbCA9IGZhbHNlXG4gICAgICAgIC8vIGlmIChzdHIuc3BsaXQoXCJcIikubWFwKChlbDogYW55KSA9PiBwYXJzZUludChlbCkgKiBjb3VudGVyRmFrZS0tKS5yZWR1Y2UoKGE6IGFueSwgYjogYW55KSA9PiBhICsgYikgJSAxMSA9PT0gMCkge1xuICAgICAgICAvLyAgICAgdmFyIHN0ckNvbnRhaW5lcjpBcnJheTxhbnk+ID0gW107XG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhzdHIpO1xuICAgICAgICAvLyAgICAgc3RyID0gXCI5NzhcIiArIHN0clxuICAgICAgICAgICAgXG4gICAgICAgIC8vICAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIik7XG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhzdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgLy8gICAgICAgICB3ZWlnaHRCb29sID0gIXdlaWdodEJvb2w7XG4gICAgICAgIC8vICAgICAgICAgc3RyQ29udGFpbmVyW2luZGV4XSA9IChwYXJzZUludChzdHJbaW5kZXhdKSAqICh3ZWlnaHRCb29sID8gMSA6IDMpKTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHN0ckNvbnRhaW5lcik7XG4gICAgICAgICAgICBcbiAgICAgICAgLy8gICAgIGxldCBzdW0gPSBzdHJDb250YWluZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhzdW0pXG4gICAgICAgIC8vICAgICBsZXQgY2hlY2tEaWdpdCA9ICgxMCAtIChzdW0gJSAxMCkpICUgMTAgO1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coY2hlY2tEaWdpdCk7XG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhzdHIpO1xuICAgICAgICAvLyAgICAgc3RyID0gc3RyLmpvaW4oXCJcIikucmVwbGFjZSgvLC9nLCBcIlwiKTtcbiAgICAgICAgLy8gICAgIC8vIHN0ciArIGNoZWNrRGlnaXQudG9TdHJpbmcoKVxuICAgICAgICAvLyAgICAgc3RyICsgY2FsY3VsYXRlQ2hlY2tEaWdpdChzdHIpXG4gICAgICAgIC8vICByZXR1cm4gICBzdHIrIGNoZWNrRGlnaXQudG9TdHJpbmcoKVxuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgcmV0dXJuIFwiSW52YWxpZFwiXG4gICAgICAgIC8vIH1cblxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0ci5tYXAoKGVsOiBhbnkpID0+IHBhcnNlSW50KGVsKSAqIGNvdW50ZXJGYWtlLS0pLnJlZHVjZSgoYTogYW55LCBiOiBhbnkpID0+IGEgKyBiKSk7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coc3RyQ29udGFpbmVyLnJlZHVjZSgoYTogYW55LCBiOiBhbnkpID0+IGEgKyBiKSAlIDEwID09PSAwKTtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdW0pO1xuXG5cblxuXG4gICAgfVxuXG5cblxufTtcbmNvbnN0IGNhbGN1bGF0ZUNoZWNrRGlnaXQgPSAoaXNibjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgZGlnaXRBcnJheSA9IGlzYm4uc3BsaXQoXCJcIikubWFwKE51bWJlcik7IC8vIENvbnZlcnQgSVNCTiBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgZGlnaXRzXG4gIFxuICAgIC8vIE11bHRpcGx5IGVhY2ggZGlnaXQgYnkgaXRzIGNvcnJlc3BvbmRpbmcgd2VpZ2h0ICgxIG9yIDMpXG4gICAgY29uc3Qgd2VpZ2h0ZWREaWdpdHMgPSBkaWdpdEFycmF5Lm1hcCgoZGlnaXQ6IG51bWJlciwgaW5kZXg6IG51bWJlcikgPT4gZGlnaXQgKiAoaW5kZXggJSAyID09PSAwID8gMSA6IDMpKTtcbiAgXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBzdW0gb2YgYWxsIHRoZSB3ZWlnaHRlZCBkaWdpdHNcbiAgICBjb25zdCBzdW0gPSB3ZWlnaHRlZERpZ2l0cy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbiAgXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBjaGVjayBkaWdpdFxuICAgIGNvbnN0IGNoZWNrRGlnaXQgPSAoMTAgLSAoc3VtICUgMTApKSAlIDEwO1xuICBcbiAgICByZXR1cm4gY2hlY2tEaWdpdC50b1N0cmluZygpXG59XG5cbi8vIGNvbnNvbGUubG9nKGlzYm4xMyhcIjM4NjYxNTUyMzlcIikpXG5cbi8vIGNvbnNvbGUubG9nKGlzYm4xMyhcIjM4NjYxNTUyMzdcIikpXG5cbi8vIGNvbnNvbGUubG9nKGNhbGN1bGF0ZUNoZWNrRGlnaXQoXCI5NzgzODY2MTU1MjM3XCIpKTtcblxuXG5jb25zdCBjb252ZXJ0SVNCTjEwdG8xMyA9IChpc2JuMTA6IHN0cmluZykgPT4ge1xuICAgIC8vIFJlbW92ZSBhbnkgaHlwaGVucyBmcm9tIElTQk4tMTBcbiAgICBpc2JuMTAgPSBpc2JuMTAucmVwbGFjZSgvLS9nLCAnJyk7XG4gIFxuICAgIC8vIEFkZCB0aGUgcHJlZml4IFwiOTc4XCIgdG8gdGhlIGJlZ2lubmluZ1xuICAgIGNvbnN0IGlzYm4xM1ByZWZpeCA9IFwiOTc4XCI7XG4gICAgLy8gY29uc29sZS5sb2coaXNibjEwLnNsaWNlKDAsIC0xKSk7XG4gICAgXG4gICAgY29uc3QgaXNibjEzID0gaXNibjEzUHJlZml4ICsgaXNibjEwLnNsaWNlKDAsIC0xKTtcbi8vICAgY29uc29sZS5sb2coaXNibjEzKTtcbiAgXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBjaGVjayBkaWdpdCBmb3IgSVNCTi0xM1xuICAgIGNvbnN0IGNoZWNrRGlnaXQgPSBjYWxjdWxhdGVDaGVja0RpZ2l0KGlzYm4xMyk7XG4gIFxuICAgIHJldHVybiBpc2JuMTMgKyBjaGVja0RpZ2l0O1xuICB9XG5cblxuICBjb25zb2xlLmxvZyhjb252ZXJ0SVNCTjEwdG8xMyhcIjgxNzQ1MDQ5NFhcIikpO1xuICAiXSwibWFwcGluZ3MiOiIydlpBY1k7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEs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