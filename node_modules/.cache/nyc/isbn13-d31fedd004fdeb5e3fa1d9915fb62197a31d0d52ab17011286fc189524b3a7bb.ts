"use strict";function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="e993bef620c01c326bde5a1d49f433e81b212fb6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:24}},"2":{start:{line:4,column:15},end:{line:78,column:1}},"3":{start:{line:5,column:18},end:{line:5,column:23}},"4":{start:{line:6,column:18},end:{line:6,column:23}},"5":{start:{line:7,column:4},end:{line:72,column:5}},"6":{start:{line:8,column:8},end:{line:8,column:28}},"7":{start:{line:9,column:8},end:{line:9,column:94}},"8":{start:{line:9,column:30},end:{line:9,column:42}},"9":{start:{line:9,column:63},end:{line:9,column:92}},"10":{start:{line:10,column:8},end:{line:10,column:60}},"11":{start:{line:10,column:39},end:{line:10,column:44}},"12":{start:{line:11,column:8},end:{line:11,column:45}},"13":{start:{line:13,column:9},end:{line:72,column:5}},"14":{start:{line:15,column:26},end:{line:15,column:28}},"15":{start:{line:16,column:8},end:{line:16,column:28}},"16":{start:{line:18,column:8},end:{line:18,column:25}},"17":{start:{line:20,column:8},end:{line:20,column:25}},"18":{start:{line:21,column:8},end:{line:71,column:9}},"19":{start:{line:21,column:28},end:{line:21,column:56}},"20":{start:{line:21,column:75},end:{line:21,column:80}},"21":{start:{line:23,column:33},end:{line:23,column:38}},"22":{start:{line:24,column:27},end:{line:24,column:58}},"23":{start:{line:26,column:31},end:{line:26,column:58}},"24":{start:{line:27,column:12},end:{line:27,column:39}},"25":{start:{line:70,column:12},end:{line:70,column:29}},"26":{start:{line:79,column:0},end:{line:79,column:24}},"27":{start:{line:80,column:26},end:{line:89,column:1}},"28":{start:{line:82,column:4},end:{line:82,column:39}},"29":{start:{line:84,column:25},end:{line:84,column:30}},"30":{start:{line:85,column:19},end:{line:85,column:53}},"31":{start:{line:87,column:23},end:{line:87,column:50}},"32":{start:{line:88,column:4},end:{line:88,column:31}},"33":{start:{line:90,column:28},end:{line:99,column:1}},"34":{start:{line:91,column:23},end:{line:91,column:49}},"35":{start:{line:93,column:27},end:{line:93,column:94}},"36":{start:{line:93,column:60},end:{line:93,column:93}},"37":{start:{line:95,column:16},end:{line:95,column:54}},"38":{start:{line:95,column:48},end:{line:95,column:53}},"39":{start:{line:97,column:23},end:{line:97,column:45}},"40":{start:{line:98,column:4},end:{line:98,column:33}},"41":{start:{line:100,column:0},end:{line:100,column:45}},"42":{start:{line:101,column:0},end:{line:101,column:45}},"43":{start:{line:102,column:0},end:{line:102,column:45}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:15},end:{line:4,column:16}},loc:{start:{line:4,column:24},end:{line:78,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:22},end:{line:9,column:23}},loc:{start:{line:9,column:30},end:{line:9,column:42}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:9,column:48},end:{line:9,column:49}},loc:{start:{line:9,column:63},end:{line:9,column:92}},line:9},"3":{name:"(anonymous_3)",decl:{start:{line:10,column:29},end:{line:10,column:30}},loc:{start:{line:10,column:39},end:{line:10,column:44}},line:10},"4":{name:"(anonymous_4)",decl:{start:{line:21,column:20},end:{line:21,column:21}},loc:{start:{line:21,column:28},end:{line:21,column:56}},line:21},"5":{name:"(anonymous_5)",decl:{start:{line:21,column:65},end:{line:21,column:66}},loc:{start:{line:21,column:75},end:{line:21,column:80}},line:21},"6":{name:"(anonymous_6)",decl:{start:{line:80,column:26},end:{line:80,column:27}},loc:{start:{line:80,column:38},end:{line:89,column:1}},line:80},"7":{name:"(anonymous_7)",decl:{start:{line:90,column:28},end:{line:90,column:29}},loc:{start:{line:90,column:38},end:{line:99,column:1}},line:90},"8":{name:"(anonymous_8)",decl:{start:{line:93,column:42},end:{line:93,column:43}},loc:{start:{line:93,column:60},end:{line:93,column:93}},line:93},"9":{name:"(anonymous_9)",decl:{start:{line:95,column:38},end:{line:95,column:39}},loc:{start:{line:95,column:48},end:{line:95,column:53}},line:95}},branchMap:{"0":{loc:{start:{line:7,column:4},end:{line:72,column:5}},type:"if",locations:[{start:{line:7,column:4},end:{line:72,column:5}},{start:{line:7,column:4},end:{line:72,column:5}}],line:7},"1":{loc:{start:{line:9,column:69},end:{line:9,column:91}},type:"cond-expr",locations:[{start:{line:9,column:86},end:{line:9,column:87}},{start:{line:9,column:90},end:{line:9,column:91}}],line:9},"2":{loc:{start:{line:11,column:15},end:{line:11,column:44}},type:"cond-expr",locations:[{start:{line:11,column:25},end:{line:11,column:32}},{start:{line:11,column:35},end:{line:11,column:44}}],line:11},"3":{loc:{start:{line:13,column:9},end:{line:72,column:5}},type:"if",locations:[{start:{line:13,column:9},end:{line:72,column:5}},{start:{line:13,column:9},end:{line:72,column:5}}],line:13},"4":{loc:{start:{line:21,column:8},end:{line:71,column:9}},type:"if",locations:[{start:{line:21,column:8},end:{line:71,column:9}},{start:{line:21,column:8},end:{line:71,column:9}}],line:21},"5":{loc:{start:{line:93,column:69},end:{line:93,column:92}},type:"cond-expr",locations:[{start:{line:93,column:87},end:{line:93,column:88}},{start:{line:93,column:91},end:{line:93,column:92}}],line:93}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:"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",sourcesContent:["export const isbn13 = (str: string | Array<any> | any) => {\n\n\n\n\n    let i13Bool = false\n    let isValid = false;\n    if (str.length === 13) {\n        str = str.split(\"\");\n        str = str.map((el: any) => parseInt(el)).map((el: any, index: any) => el * (index % 2 == 0 ? 1 : 3));\n        isValid = str.reduce((a: any, b: any) => a + b, 0) % 10 === 0;\n        return isValid ? \"Valid\" : \"Invalid\";\n\n    } else if (str.length === 10  ) {\n         // Remove any hyphens from ISBN-10\n         let counterFake = 10;\n         str = str.split(\"\");\n\n        //  str.replace(/X/g, '1');\n         console.log(str);\n         \n        //  let str.map((el: any) =>  parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0\nconsole.log(str)\n        if( str.map((el: any) =>  parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0){\n  \n    // Add the prefix \"978\" to the beginning\n    const isbn13Prefix = \"978\";\n    \n    \n    const isbn13 = isbn13Prefix + str.slice(0, -1);\n//   console.log(isbn13);\n  \n    const checkDigit = calculateCheckDigit(isbn13);\n  \n    return isbn13 + checkDigit;\n\n        //     // str = str.replace(/X/g, '');\n          \n        //     // Add the prefix \"978\" to the beginning\n        //     const isbn13Prefix = \"978\";\n        //     // console.log(str.slice(0, -1));\n            \n        //     const isbn13 = isbn13Prefix + str.slice(0, 9);\n        // //   console.log(isbn13);\n          \n        //     // Calculate the check digit for ISBN-13\n        //     const checkDigit = calculateCheckDigit(isbn13);\n          \n        //     return isbn13 + checkDigit;\n        // }else{\n        //     return \"Invalid\"\n        // }\n        // let counterFake = 11;\n        // let weightBool = false\n        // if (str.split(\"\").map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0) {\n        //     var strContainer:Array<any> = [];\n        //     // console.log(str);\n        //     str = \"978\" + str\n            \n        //     str = str.split(\"\");\n        //     // console.log(str.length);\n            \n        //     for (let index = 0; index < str.length; index++) {\n        //         weightBool = !weightBool;\n        //         strContainer[index] = (parseInt(str[index]) * (weightBool ? 1 : 3));\n        //     }\n        //     // console.log(strContainer);\n            \n        //     let sum = strContainer.reduce((a, b) => a + b);\n        //     // console.log(sum)\n        //     let checkDigit = (10 - (sum % 10)) % 10 ;\n        //     // console.log(checkDigit);\n        //     // console.log(str);\n        //     str = str.join(\"\").replace(/,/g, \"\");\n        //     // str + checkDigit.toString()\n        //     str + calculateCheckDigit(str)\n        //  return   str+ checkDigit.toString()\n        // } else {\n        //     return \"Invalid\"\n        // }\n\n\n        // console.log(str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b));\n\n        // console.log(strContainer.reduce((a: any, b: any) => a + b) % 10 === 0);\n\n        // console.log(sum);\n\n\n\n\n    }else{\n        return \"Invalid\"\n    }\n\n\n\n};\n\n\n// console.log(isbn13(\"3866155239\"))\n\n// console.log(isbn13(\"3866155237\"))\n\n// console.log(isbn13(\"8174504941\"))\n// console.log(calculateCheckDigit(\"9783866155237\"));\n\n\n\n}\n\nconst convertISBN10to13 = (isbn10: string) => {\n    // Remove any hyphens from ISBN-10\n    isbn10 = isbn10.replace(/X/g, '1');\n  \n    // Add the prefix \"978\" to the beginning\n    const isbn13Prefix = \"978\";\n    \n    \n    const isbn13 = isbn13Prefix + isbn10.slice(0, -1);\n    //   console.log(isbn13);\n    \n    const checkDigit = calculateCheckDigit(isbn13);\n    \n    return isbn13 + checkDigit;\n}\n\n\nconst calculateCheckDigit = (isbn: string) => {\n    const digitArray = isbn.split(\"\").map(Number); // Convert ISBN string to an array of digits\n    \n    // Multiply each digit by its corresponding weight (1 or 3)\n    const weightedDigits = digitArray.map((digit: number, index: number) => digit * (index % 2 === 0 ? 1 : 3));\n    \n    // Calculate the sum of all the weighted digits\n    const sum = weightedDigits.reduce((a, b) => a + b);\n    \n    // Calculate the check digit\n    const checkDigit = (10 - (sum % 10)) % 10;\n  \n    return checkDigit.toString()\n    }\n\n    console.log(convertISBN10to13(\"0316066524\"));\n    console.log(convertISBN10to13(\"817450494X\"));\n    console.log(convertISBN10to13(\"3866155239\"));\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e993bef620c01c326bde5a1d49f433e81b212fb6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;let i13Bool=(cov_1az1wpajte().s[3]++,false);let isValid=(cov_1az1wpajte().s[4]++,false);cov_1az1wpajte().s[5]++;if(str.length===13){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[6]++;str=str.split("");cov_1az1wpajte().s[7]++;str=str.map(el=>{cov_1az1wpajte().f[1]++;cov_1az1wpajte().s[8]++;return parseInt(el);}).map((el,index)=>{cov_1az1wpajte().f[2]++;cov_1az1wpajte().s[9]++;return el*(index%2==0?(cov_1az1wpajte().b[1][0]++,1):(cov_1az1wpajte().b[1][1]++,3));});cov_1az1wpajte().s[10]++;isValid=str.reduce((a,b)=>{cov_1az1wpajte().f[3]++;cov_1az1wpajte().s[11]++;return a+b;},0)%10===0;cov_1az1wpajte().s[12]++;return isValid?(cov_1az1wpajte().b[2][0]++,"Valid"):(cov_1az1wpajte().b[2][1]++,"Invalid");}else{cov_1az1wpajte().b[0][1]++;cov_1az1wpajte().s[13]++;if(str.length===10){cov_1az1wpajte().b[3][0]++;// Remove any hyphens from ISBN-10
let counterFake=(cov_1az1wpajte().s[14]++,10);cov_1az1wpajte().s[15]++;str=str.split("");//  str.replace(/X/g, '1');
cov_1az1wpajte().s[16]++;console.log(str);//  let str.map((el: any) =>  parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0
cov_1az1wpajte().s[17]++;console.log(str);cov_1az1wpajte().s[18]++;if(str.map(el=>{cov_1az1wpajte().f[4]++;cov_1az1wpajte().s[19]++;return parseInt(el)*counterFake--;}).reduce((a,b)=>{cov_1az1wpajte().f[5]++;cov_1az1wpajte().s[20]++;return a+b;})%11===0){cov_1az1wpajte().b[4][0]++;// Add the prefix "978" to the beginning
const isbn13Prefix=(cov_1az1wpajte().s[21]++,"978");const isbn13=(cov_1az1wpajte().s[22]++,isbn13Prefix+str.slice(0,-1));//   console.log(isbn13);
const checkDigit=(cov_1az1wpajte().s[23]++,calculateCheckDigit(isbn13));cov_1az1wpajte().s[24]++;return isbn13+checkDigit;//     // str = str.replace(/X/g, '');
//     // Add the prefix "978" to the beginning
//     const isbn13Prefix = "978";
//     // console.log(str.slice(0, -1));
//     const isbn13 = isbn13Prefix + str.slice(0, 9);
// //   console.log(isbn13);
//     // Calculate the check digit for ISBN-13
//     const checkDigit = calculateCheckDigit(isbn13);
//     return isbn13 + checkDigit;
// }else{
//     return "Invalid"
// }
// let counterFake = 11;
// let weightBool = false
// if (str.split("").map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b) % 11 === 0) {
//     var strContainer:Array<any> = [];
//     // console.log(str);
//     str = "978" + str
//     str = str.split("");
//     // console.log(str.length);
//     for (let index = 0; index < str.length; index++) {
//         weightBool = !weightBool;
//         strContainer[index] = (parseInt(str[index]) * (weightBool ? 1 : 3));
//     }
//     // console.log(strContainer);
//     let sum = strContainer.reduce((a, b) => a + b);
//     // console.log(sum)
//     let checkDigit = (10 - (sum % 10)) % 10 ;
//     // console.log(checkDigit);
//     // console.log(str);
//     str = str.join("").replace(/,/g, "");
//     // str + checkDigit.toString()
//     str + calculateCheckDigit(str)
//  return   str+ checkDigit.toString()
// } else {
//     return "Invalid"
// }
// console.log(str.map((el: any) => parseInt(el) * counterFake--).reduce((a: any, b: any) => a + b));
// console.log(strContainer.reduce((a: any, b: any) => a + b) % 10 === 0);
// console.log(sum);
}else{cov_1az1wpajte().b[4][1]++;cov_1az1wpajte().s[25]++;return"Invalid";}}else{cov_1az1wpajte().b[3][1]++;}};// console.log(isbn13("3866155239"))
// console.log(isbn13("3866155237"))
// console.log(isbn13("8174504941"))
// console.log(calculateCheckDigit("9783866155237"));
};cov_1az1wpajte().s[26]++;exports.isbn13=isbn13;cov_1az1wpajte().s[27]++;const convertISBN10to13=isbn10=>{cov_1az1wpajte().f[6]++;cov_1az1wpajte().s[28]++;// Remove any hyphens from ISBN-10
isbn10=isbn10.replace(/X/g,'1');// Add the prefix "978" to the beginning
const isbn13Prefix=(cov_1az1wpajte().s[29]++,"978");const isbn13=(cov_1az1wpajte().s[30]++,isbn13Prefix+isbn10.slice(0,-1));//   console.log(isbn13);
const checkDigit=(cov_1az1wpajte().s[31]++,calculateCheckDigit(isbn13));cov_1az1wpajte().s[32]++;return isbn13+checkDigit;};cov_1az1wpajte().s[33]++;const calculateCheckDigit=isbn=>{cov_1az1wpajte().f[7]++;const digitArray=(cov_1az1wpajte().s[34]++,isbn.split("").map(Number));// Convert ISBN string to an array of digits
// Multiply each digit by its corresponding weight (1 or 3)
const weightedDigits=(cov_1az1wpajte().s[35]++,digitArray.map((digit,index)=>{cov_1az1wpajte().f[8]++;cov_1az1wpajte().s[36]++;return digit*(index%2===0?(cov_1az1wpajte().b[5][0]++,1):(cov_1az1wpajte().b[5][1]++,3));}));// Calculate the sum of all the weighted digits
const sum=(cov_1az1wpajte().s[37]++,weightedDigits.reduce((a,b)=>{cov_1az1wpajte().f[9]++;cov_1az1wpajte().s[38]++;return a+b;}));// Calculate the check digit
const checkDigit=(cov_1az1wpajte().s[39]++,(10-sum%10)%10);cov_1az1wpajte().s[40]++;return checkDigit.toString();};cov_1az1wpajte().s[41]++;console.log(convertISBN10to13("0316066524"));cov_1az1wpajte().s[42]++;console.log(convertISBN10to13("817450494X"));cov_1az1wpajte().s[43]++;console.log(convertISBN10to13("3866155239"));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,