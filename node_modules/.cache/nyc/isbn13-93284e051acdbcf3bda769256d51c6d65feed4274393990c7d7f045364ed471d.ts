"use strict";// export let isbn13 = (str: string | Array<any> | any) => {
function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="0c274ee547fd1857ba2d48c4f12cc791c73b43de";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:0},end:{line:4,column:24}},"2":{start:{line:34,column:15},end:{line:64,column:1}},"3":{start:{line:35,column:18},end:{line:35,column:23}},"4":{start:{line:36,column:23},end:{line:36,column:25}},"5":{start:{line:37,column:21},end:{line:37,column:26}},"6":{start:{line:38,column:4},end:{line:63,column:5}},"7":{start:{line:39,column:8},end:{line:39,column:38}},"8":{start:{line:40,column:8},end:{line:40,column:28}},"9":{start:{line:41,column:8},end:{line:44,column:9}},"10":{start:{line:41,column:25},end:{line:41,column:26}},"11":{start:{line:42,column:12},end:{line:42,column:37}},"12":{start:{line:43,column:12},end:{line:43,column:78}},"13":{start:{line:45,column:18},end:{line:45,column:54}},"14":{start:{line:45,column:48},end:{line:45,column:53}},"15":{start:{line:46,column:25},end:{line:46,column:47}},"16":{start:{line:47,column:8},end:{line:47,column:45}},"17":{start:{line:48,column:8},end:{line:48,column:25}},"18":{start:{line:49,column:8},end:{line:49,column:71}},"19":{start:{line:52,column:8},end:{line:52,column:28}},"20":{start:{line:53,column:8},end:{line:55,column:9}},"21":{start:{line:54,column:12},end:{line:54,column:39}},"22":{start:{line:56,column:8},end:{line:59,column:9}},"23":{start:{line:56,column:25},end:{line:56,column:26}},"24":{start:{line:57,column:12},end:{line:57,column:37}},"25":{start:{line:58,column:12},end:{line:58,column:78}},"26":{start:{line:60,column:18},end:{line:60,column:54}},"27":{start:{line:60,column:48},end:{line:60,column:53}},"28":{start:{line:61,column:8},end:{line:61,column:33}},"29":{start:{line:62,column:8},end:{line:62,column:45}},"30":{start:{line:65,column:0},end:{line:65,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:15},end:{line:34,column:16}},loc:{start:{line:34,column:24},end:{line:64,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:45,column:38},end:{line:45,column:39}},loc:{start:{line:45,column:48},end:{line:45,column:53}},line:45},"2":{name:"(anonymous_2)",decl:{start:{line:60,column:38},end:{line:60,column:39}},loc:{start:{line:60,column:48},end:{line:60,column:53}},line:60}},branchMap:{"0":{loc:{start:{line:38,column:4},end:{line:63,column:5}},type:"if",locations:[{start:{line:38,column:4},end:{line:63,column:5}},{start:{line:38,column:4},end:{line:63,column:5}}],line:38},"1":{loc:{start:{line:43,column:58},end:{line:43,column:76}},type:"cond-expr",locations:[{start:{line:43,column:71},end:{line:43,column:72}},{start:{line:43,column:75},end:{line:43,column:76}}],line:43},"2":{loc:{start:{line:49,column:15},end:{line:49,column:70}},type:"cond-expr",locations:[{start:{line:49,column:31},end:{line:49,column:58}},{start:{line:49,column:61},end:{line:49,column:70}}],line:49},"3":{loc:{start:{line:53,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:53,column:8},end:{line:55,column:9}},{start:{line:53,column:8},end:{line:55,column:9}}],line:53},"4":{loc:{start:{line:58,column:58},end:{line:58,column:76}},type:"cond-expr",locations:[{start:{line:58,column:71},end:{line:58,column:72}},{start:{line:58,column:75},end:{line:58,column:76}}],line:58},"5":{loc:{start:{line:62,column:15},end:{line:62,column:44}},type:"cond-expr",locations:[{start:{line:62,column:25},end:{line:62,column:32}},{start:{line:62,column:35},end:{line:62,column:44}}],line:62}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:";AAAA,4DAA4D;;;AAG5D,2BAA2B;AAC3B,4BAA4B;AAE5B,sCAAsC;AAGtC,+BAA+B;AAC/B,yCAAyC;AACzC,+BAA+B;AAE/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AAEZ,wDAAwD;AACxD,iDAAiD;AACjD,6CAA6C;AAC7C,wEAAwE;AACxE,eAAe;AACf,+BAA+B;AAC/B,+BAA+B;AAG/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AACZ,uEAAuE;AACvE,wDAAwD;AACxD,iDAAiD;AACjD,2DAA2D;AAC3D,8FAA8F;AAE9F,8CAA8C;AAC9C,QAAQ;AAKR,IAAI;AAIG,MAAM,MAAM,GAAG,CAAC,GAA8B,EAAE,EAAE;IACrD,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,YAAY,GAAG,EAAE,CAAC;IAEtB,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEpB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC/C,UAAU,GAAG,CAAC,UAAU,CAAC;YACzB,YAAY,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE;QAED,IAAI,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;QACxC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEb,OAAO,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;KAChE;SAAK;QACJ,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEpB,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,EAAE;YAC7C,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;SAC5B;QAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC/C,UAAU,GAAG,CAAC,UAAU,CAAC;YACzB,YAAY,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE;QAGD,IAAI,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,OAAO,GAAG,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;QAEzB,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;KACtC;AAEH,CAAC,CAAC;AAxCS,QAAA,MAAM,UAwCf;AAGJ,8DAA8D;AAC9D,+BAA+B;AAC/B,uCAAuC;AACvC,QAAQ;AAER,+BAA+B;AAC/B,0BAA0B;AAC1B,QAAQ;AAER,mBAAmB;AACnB,sBAAsB;AAEtB,iDAAiD;AACjD,wCAAwC;AACxC,4BAA4B;AAC5B,4BAA4B;AAC5B,UAAU;AACV,+BAA+B;AAC/B,yCAAyC;AACzC,QAAQ;AAER,2DAA2D;AAC3D,8DAA8D;AAC9D,4DAA4D;AAE5D,qCAAqC;AACrC,0BAA0B;AAC1B,QAAQ;AAER,8EAA8E;AAC9E,OAAO",sourcesContent:["// export let isbn13 = (str: string | Array<any> | any) => {\n    \n    \n//     let isValid = false;\n//     let strContainer = []\n\n//     let weightBool: boolean = false\n\n\n//     if (str.length === 10) {\n//         str = \"978\" + str.slice(0, 9);\n//         str = str.split(\"\");\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//         str = str.join().replace(/,/g, \"\")\n//         return c % 10 !== 0? str + check_digit.toString(): \"Invalid\";\n//     } else {\n//         str = str.split(\"\");\n//         // console.log(str);\n\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//          strContainer.reduce((a, b) => a + b) % 10 === 0\n//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;\n\n//          return isValid ? \"Valid\":\"Invalid\"\n//     }\n\n\n\n\n// }\n\n\n\nexport const isbn13 = (str: string | Array<any> | any) => {\n    let isValid = false;\n    let strContainer = [];\n  \n    let weightBool = false;\n  \n    if (str.length === 10) {\n      str = \"978\" + str.slice(0, 9);\n      str = str.split(\"\");\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n      let sum = strContainer.reduce((a, b) => a + b);\n      let checkDigit = (10 - (sum % 10)) % 10;\n      str = str.join(\"\").replace(/,/g, \"\");\n  console.log(sum);\n  \n      return sum % 10 == 0 ? str + checkDigit.toString() : \"Invalid\";\n    }else {\n      str = str.split(\"\");\n  \n      if (str[str.length - 1].toUpperCase() === 'X') {\n        str[str.length - 1] = '10';\n      }\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n\n      let sum = strContainer.reduce((a, b) => a + b);\n      isValid = sum % 10 === 0;\n  \n      return isValid ? \"Valid\" : \"Invalid\";\n    }\n    \n  };\n\n\n// export const isbn13 = (str: string | Array<any> | any) => {\n//     if (str.length === 10) {\n//       str = \"978\" + str.slice(0, 9);\n//     }\n  \n//     if (str.length !== 13) {\n//       return \"Invalid\";\n//     }\n  \n//     let sum = 0;\n//     let weight = 1;\n  \n//     for (let i = 0; i < str.length - 1; i++) {\n//       const digit = parseInt(str[i]);\n//       if (isNaN(digit)) {\n//         return \"Invalid\";\n//       }\n//       sum += digit * weight;\n//       weight = (weight === 1) ? 3 : 1;\n//     }\n  \n//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n//     const actualCheckDigit = parseInt(str[str.length - 1]);\n//   console.log(actualCheckDigit+\" \"+calculatedCheckDigit);\n  \n//     if (isNaN(actualCheckDigit)) {\n//       return \"Invalid\";\n//     }\n  \n//     return calculatedCheckDigit === actualCheckDigit ? \"Valid\" : \"Invalid\";\n//   };\n  "]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0c274ee547fd1857ba2d48c4f12cc791c73b43de"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;//     let isValid = false;
//     let strContainer = []
//     let weightBool: boolean = false
//     if (str.length === 10) {
//         str = "978" + str.slice(0, 9);
//         str = str.split("");
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//         str = str.join().replace(/,/g, "")
//         return c % 10 !== 0? str + check_digit.toString(): "Invalid";
//     } else {
//         str = str.split("");
//         // console.log(str);
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//          strContainer.reduce((a, b) => a + b) % 10 === 0
//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;
//          return isValid ? "Valid":"Invalid"
//     }
// }
cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;let isValid=(cov_1az1wpajte().s[3]++,false);let strContainer=(cov_1az1wpajte().s[4]++,[]);let weightBool=(cov_1az1wpajte().s[5]++,false);cov_1az1wpajte().s[6]++;if(str.length===10){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[7]++;str="978"+str.slice(0,9);cov_1az1wpajte().s[8]++;str=str.split("");cov_1az1wpajte().s[9]++;for(let index=(cov_1az1wpajte().s[10]++,0);index<str.length;index++){cov_1az1wpajte().s[11]++;weightBool=!weightBool;cov_1az1wpajte().s[12]++;strContainer[index]=parseInt(str[index])*(weightBool?(cov_1az1wpajte().b[1][0]++,1):(cov_1az1wpajte().b[1][1]++,3));}let sum=(cov_1az1wpajte().s[13]++,strContainer.reduce((a,b)=>{cov_1az1wpajte().f[1]++;cov_1az1wpajte().s[14]++;return a+b;}));let checkDigit=(cov_1az1wpajte().s[15]++,(10-sum%10)%10);cov_1az1wpajte().s[16]++;str=str.join("").replace(/,/g,"");cov_1az1wpajte().s[17]++;console.log(sum);cov_1az1wpajte().s[18]++;return sum%10==0?(cov_1az1wpajte().b[2][0]++,str+checkDigit.toString()):(cov_1az1wpajte().b[2][1]++,"Invalid");}else{cov_1az1wpajte().b[0][1]++;cov_1az1wpajte().s[19]++;str=str.split("");cov_1az1wpajte().s[20]++;if(str[str.length-1].toUpperCase()==='X'){cov_1az1wpajte().b[3][0]++;cov_1az1wpajte().s[21]++;str[str.length-1]='10';}else{cov_1az1wpajte().b[3][1]++;}cov_1az1wpajte().s[22]++;for(let index=(cov_1az1wpajte().s[23]++,0);index<str.length;index++){cov_1az1wpajte().s[24]++;weightBool=!weightBool;cov_1az1wpajte().s[25]++;strContainer[index]=parseInt(str[index])*(weightBool?(cov_1az1wpajte().b[4][0]++,1):(cov_1az1wpajte().b[4][1]++,3));}let sum=(cov_1az1wpajte().s[26]++,strContainer.reduce((a,b)=>{cov_1az1wpajte().f[2]++;cov_1az1wpajte().s[27]++;return a+b;}));cov_1az1wpajte().s[28]++;isValid=sum%10===0;cov_1az1wpajte().s[29]++;return isValid?(cov_1az1wpajte().b[5][0]++,"Valid"):(cov_1az1wpajte().b[5][1]++,"Invalid");}};cov_1az1wpajte().s[30]++;exports.isbn13=isbn13;// export const isbn13 = (str: string | Array<any> | any) => {
//     if (str.length === 10) {
//       str = "978" + str.slice(0, 9);
//     }
//     if (str.length !== 13) {
//       return "Invalid";
//     }
//     let sum = 0;
//     let weight = 1;
//     for (let i = 0; i < str.length - 1; i++) {
//       const digit = parseInt(str[i]);
//       if (isNaN(digit)) {
//         return "Invalid";
//       }
//       sum += digit * weight;
//       weight = (weight === 1) ? 3 : 1;
//     }
//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;
//     const actualCheckDigit = parseInt(str[str.length - 1]);
//   console.log(actualCheckDigit+" "+calculatedCheckDigit);
//     if (isNaN(actualCheckDigit)) {
//       return "Invalid";
//     }
//     return calculatedCheckDigit === actualCheckDigit ? "Valid" : "Invalid";
//   };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvY29kZXgtY29kZXIvRG9jdW1lbnRzL3Byb2plY3RzL2NlYXNhci1jeXBoZXIvaXNibjEzLnRzIiwic291cmNlcyI6WyIvaG9tZS9jb2RleC1jb2Rlci9Eb2N1bWVudHMvcHJvamVjdHMvY2Vhc2FyLWN5cGhlci9pc2JuMTMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDs7O0FBRzVELDJCQUEyQjtBQUMzQiw0QkFBNEI7QUFFNUIsc0NBQXNDO0FBR3RDLCtCQUErQjtBQUMvQix5Q0FBeUM7QUFDekMsK0JBQStCO0FBRS9CLDZEQUE2RDtBQUM3RCx1Q0FBdUM7QUFDdkMsZ0ZBQWdGO0FBRWhGLFlBQVk7QUFFWix3REFBd0Q7QUFDeEQsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3Qyx3RUFBd0U7QUFDeEUsZUFBZTtBQUNmLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFHL0IsNkRBQTZEO0FBQzdELHVDQUF1QztBQUN2QyxnRkFBZ0Y7QUFFaEYsWUFBWTtBQUNaLHVFQUF1RTtBQUN2RSx3REFBd0Q7QUFDeEQsaURBQWlEO0FBQ2pELDJEQUEyRDtBQUMzRCw4RkFBOEY7QUFFOUYsOENBQThDO0FBQzlDLFFBQVE7QUFLUixJQUFJO0FBSUcsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUE4QixFQUFFLEVBQUU7SUFDckQsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUV0QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFFdkIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtRQUNyQixHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXBCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQy9DLFVBQVUsR0FBRyxDQUFDLFVBQVUsQ0FBQztZQUN6QixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFYixPQUFPLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7S0FDaEU7U0FBSztRQUNKLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXBCLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssR0FBRyxFQUFFO1lBQzdDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUM1QjtRQUVELEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQy9DLFVBQVUsR0FBRyxDQUFDLFVBQVUsQ0FBQztZQUN6QixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25FO1FBR0QsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFekIsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0tBQ3RDO0FBRUgsQ0FBQyxDQUFDO0FBeENTLFFBQUEsTUFBTSxVQXdDZjtBQUdKLDhEQUE4RDtBQUM5RCwrQkFBK0I7QUFDL0IsdUNBQXVDO0FBQ3ZDLFFBQVE7QUFFUiwrQkFBK0I7QUFDL0IsMEJBQTBCO0FBQzFCLFFBQVE7QUFFUixtQkFBbUI7QUFDbkIsc0JBQXNCO0FBRXRCLGlEQUFpRDtBQUNqRCx3Q0FBd0M7QUFDeEMsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QixVQUFVO0FBQ1YsK0JBQStCO0FBQy9CLHlDQUF5QztBQUN6QyxRQUFRO0FBRVIsMkRBQTJEO0FBQzNELDhEQUE4RDtBQUM5RCw0REFBNEQ7QUFFNUQscUNBQXFDO0FBQ3JDLDBCQUEwQjtBQUMxQixRQUFRO0FBRVIsOEVBQThFO0FBQzlFLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHBvcnQgbGV0IGlzYm4xMyA9IChzdHI6IHN0cmluZyB8IEFycmF5PGFueT4gfCBhbnkpID0+IHtcbiAgICBcbiAgICBcbi8vICAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xuLy8gICAgIGxldCBzdHJDb250YWluZXIgPSBbXVxuXG4vLyAgICAgbGV0IHdlaWdodEJvb2w6IGJvb2xlYW4gPSBmYWxzZVxuXG5cbi8vICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMTApIHtcbi8vICAgICAgICAgc3RyID0gXCI5NzhcIiArIHN0ci5zbGljZSgwLCA5KTtcbi8vICAgICAgICAgc3RyID0gc3RyLnNwbGl0KFwiXCIpO1xuXG4vLyAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgc3RyLmxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4vLyAgICAgICAgICAgICB3ZWlnaHRCb29sID0gIXdlaWdodEJvb2xcbi8vICAgICAgICAgICAgIHN0ckNvbnRhaW5lcltpbmRleF0gPSBwYXJzZUludChzdHJbaW5kZXhdKSAqICh3ZWlnaHRCb29sID8gMSA6IDMpXG5cbi8vICAgICAgICAgfVxuXG4vLyAgICAgICAgIGxldCBjID0gc3RyQ29udGFpbmVyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xuLy8gICAgICAgICBsZXQgY2hlY2tfZGlnaXQgPSAoMTAgLSAoYyAlIDEwKSkgJSAxMFxuLy8gICAgICAgICBzdHIgPSBzdHIuam9pbigpLnJlcGxhY2UoLywvZywgXCJcIilcbi8vICAgICAgICAgcmV0dXJuIGMgJSAxMCAhPT0gMD8gc3RyICsgY2hlY2tfZGlnaXQudG9TdHJpbmcoKTogXCJJbnZhbGlkXCI7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgc3RyID0gc3RyLnNwbGl0KFwiXCIpO1xuLy8gICAgICAgICAvLyBjb25zb2xlLmxvZyhzdHIpO1xuXG5cbi8vICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBzdHIubGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbi8vICAgICAgICAgICAgIHdlaWdodEJvb2wgPSAhd2VpZ2h0Qm9vbFxuLy8gICAgICAgICAgICAgc3RyQ29udGFpbmVyW2luZGV4XSA9IHBhcnNlSW50KHN0cltpbmRleF0pICogKHdlaWdodEJvb2wgPyAxIDogMylcblxuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKHN0ckNvbnRhaW5lci5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSAlIDEwID09PSAwKVxuLy8gICAgICAgICBsZXQgYyA9IHN0ckNvbnRhaW5lci5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTtcbi8vICAgICAgICAgbGV0IGNoZWNrX2RpZ2l0ID0gKDEwIC0gKGMgJSAxMCkpICUgMTBcbi8vICAgICAgICAgIHN0ckNvbnRhaW5lci5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSAlIDEwID09PSAwXG4vLyAgICAgICAgICBzdHJDb250YWluZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYikgJSAxMCA9PT0gMCA/ICBpc1ZhbGlkID10cnVlIDogaXNWYWxpZCA9ZmFsc2U7XG5cbi8vICAgICAgICAgIHJldHVybiBpc1ZhbGlkID8gXCJWYWxpZFwiOlwiSW52YWxpZFwiXG4vLyAgICAgfVxuXG5cblxuXG4vLyB9XG5cblxuXG5leHBvcnQgY29uc3QgaXNibjEzID0gKHN0cjogc3RyaW5nIHwgQXJyYXk8YW55PiB8IGFueSkgPT4ge1xuICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgbGV0IHN0ckNvbnRhaW5lciA9IFtdO1xuICBcbiAgICBsZXQgd2VpZ2h0Qm9vbCA9IGZhbHNlO1xuICBcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHN0ciA9IFwiOTc4XCIgKyBzdHIuc2xpY2UoMCwgOSk7XG4gICAgICBzdHIgPSBzdHIuc3BsaXQoXCJcIik7XG4gIFxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgd2VpZ2h0Qm9vbCA9ICF3ZWlnaHRCb29sO1xuICAgICAgICBzdHJDb250YWluZXJbaW5kZXhdID0gcGFyc2VJbnQoc3RyW2luZGV4XSkgKiAod2VpZ2h0Qm9vbCA/IDEgOiAzKTtcbiAgICAgIH1cbiAgXG4gICAgICBsZXQgc3VtID0gc3RyQ29udGFpbmVyLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpO1xuICAgICAgbGV0IGNoZWNrRGlnaXQgPSAoMTAgLSAoc3VtICUgMTApKSAlIDEwO1xuICAgICAgc3RyID0gc3RyLmpvaW4oXCJcIikucmVwbGFjZSgvLC9nLCBcIlwiKTtcbiAgY29uc29sZS5sb2coc3VtKTtcbiAgXG4gICAgICByZXR1cm4gc3VtICUgMTAgPT0gMCA/IHN0ciArIGNoZWNrRGlnaXQudG9TdHJpbmcoKSA6IFwiSW52YWxpZFwiO1xuICAgIH1lbHNlIHtcbiAgICAgIHN0ciA9IHN0ci5zcGxpdChcIlwiKTtcbiAgXG4gICAgICBpZiAoc3RyW3N0ci5sZW5ndGggLSAxXS50b1VwcGVyQ2FzZSgpID09PSAnWCcpIHtcbiAgICAgICAgc3RyW3N0ci5sZW5ndGggLSAxXSA9ICcxMCc7XG4gICAgICB9XG4gIFxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgd2VpZ2h0Qm9vbCA9ICF3ZWlnaHRCb29sO1xuICAgICAgICBzdHJDb250YWluZXJbaW5kZXhdID0gcGFyc2VJbnQoc3RyW2luZGV4XSkgKiAod2VpZ2h0Qm9vbCA/IDEgOiAzKTtcbiAgICAgIH1cbiAgXG5cbiAgICAgIGxldCBzdW0gPSBzdHJDb250YWluZXIucmVkdWNlKChhLCBiKSA9PiBhICsgYik7XG4gICAgICBpc1ZhbGlkID0gc3VtICUgMTAgPT09IDA7XG4gIFxuICAgICAgcmV0dXJuIGlzVmFsaWQgPyBcIlZhbGlkXCIgOiBcIkludmFsaWRcIjtcbiAgICB9XG4gICAgXG4gIH07XG5cblxuLy8gZXhwb3J0IGNvbnN0IGlzYm4xMyA9IChzdHI6IHN0cmluZyB8IEFycmF5PGFueT4gfCBhbnkpID0+IHtcbi8vICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMTApIHtcbi8vICAgICAgIHN0ciA9IFwiOTc4XCIgKyBzdHIuc2xpY2UoMCwgOSk7XG4vLyAgICAgfVxuICBcbi8vICAgICBpZiAoc3RyLmxlbmd0aCAhPT0gMTMpIHtcbi8vICAgICAgIHJldHVybiBcIkludmFsaWRcIjtcbi8vICAgICB9XG4gIFxuLy8gICAgIGxldCBzdW0gPSAwO1xuLy8gICAgIGxldCB3ZWlnaHQgPSAxO1xuICBcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGggLSAxOyBpKyspIHtcbi8vICAgICAgIGNvbnN0IGRpZ2l0ID0gcGFyc2VJbnQoc3RyW2ldKTtcbi8vICAgICAgIGlmIChpc05hTihkaWdpdCkpIHtcbi8vICAgICAgICAgcmV0dXJuIFwiSW52YWxpZFwiO1xuLy8gICAgICAgfVxuLy8gICAgICAgc3VtICs9IGRpZ2l0ICogd2VpZ2h0O1xuLy8gICAgICAgd2VpZ2h0ID0gKHdlaWdodCA9PT0gMSkgPyAzIDogMTtcbi8vICAgICB9XG4gIFxuLy8gICAgIGNvbnN0IGNhbGN1bGF0ZWRDaGVja0RpZ2l0ID0gKDEwIC0gKHN1bSAlIDEwKSkgJSAxMDtcbi8vICAgICBjb25zdCBhY3R1YWxDaGVja0RpZ2l0ID0gcGFyc2VJbnQoc3RyW3N0ci5sZW5ndGggLSAxXSk7XG4vLyAgIGNvbnNvbGUubG9nKGFjdHVhbENoZWNrRGlnaXQrXCIgXCIrY2FsY3VsYXRlZENoZWNrRGlnaXQpO1xuICBcbi8vICAgICBpZiAoaXNOYU4oYWN0dWFsQ2hlY2tEaWdpdCkpIHtcbi8vICAgICAgIHJldHVybiBcIkludmFsaWRcIjtcbi8vICAgICB9XG4gIFxuLy8gICAgIHJldHVybiBjYWxjdWxhdGVkQ2hlY2tEaWdpdCA9PT0gYWN0dWFsQ2hlY2tEaWdpdCA/IFwiVmFsaWRcIiA6IFwiSW52YWxpZFwiO1xuLy8gICB9O1xuICAiXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,