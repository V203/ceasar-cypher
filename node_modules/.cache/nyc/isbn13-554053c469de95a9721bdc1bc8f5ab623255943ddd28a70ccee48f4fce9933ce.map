{"version":3,"file":"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts","sources":["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],"names":[],"mappings":";AAAA,4DAA4D;;;AAG5D,2BAA2B;AAC3B,4BAA4B;AAE5B,sCAAsC;AAGtC,+BAA+B;AAC/B,yCAAyC;AACzC,+BAA+B;AAE/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AAEZ,wDAAwD;AACxD,iDAAiD;AACjD,6CAA6C;AAC7C,wEAAwE;AACxE,eAAe;AACf,+BAA+B;AAC/B,+BAA+B;AAG/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AACZ,uEAAuE;AACvE,wDAAwD;AACxD,iDAAiD;AACjD,2DAA2D;AAC3D,8FAA8F;AAE9F,8CAA8C;AAC9C,QAAQ;AAKR,IAAI;AAIJ,8DAA8D;AAC9D,2BAA2B;AAC3B,6BAA6B;AAE7B,8BAA8B;AAE9B,+BAA+B;AAC/B,uCAAuC;AACvC,6BAA6B;AAE7B,2DAA2D;AAC3D,oCAAoC;AACpC,6EAA6E;AAC7E,UAAU;AAEV,wDAAwD;AACxD,iDAAiD;AACjD,8CAA8C;AAE9C,yEAAyE;AACzE,eAAe;AACf,6BAA6B;AAE7B,yDAAyD;AACzD,sCAAsC;AACtC,UAAU;AAEV,2DAA2D;AAC3D,oCAAoC;AACpC,6EAA6E;AAC7E,UAAU;AAEV,wDAAwD;AACxD,kCAAkC;AAElC,8CAA8C;AAC9C,QAAQ;AACR,OAAO;AAGA,MAAM,MAAM,GAAG,CAAC,GAA8B,EAAE,EAAE;IACrD,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC/B;IAED,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YAChB,OAAO,SAAS,CAAC;SAClB;QACD,GAAG,IAAI,KAAK,GAAG,MAAM,CAAC;QACtB,MAAM,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC;IAED,MAAM,oBAAoB,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACpD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACzD,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAC,GAAG,GAAC,oBAAoB,CAAC,CAAC;IAErD,IAAI,KAAK,CAAC,gBAAgB,CAAC,EAAE;QAC3B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,oBAAoB,KAAK,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;AACzE,CAAC,CAAC;AA9BS,QAAA,MAAM,UA8Bf","sourcesContent":["// export let isbn13 = (str: string | Array<any> | any) => {\n    \n    \n//     let isValid = false;\n//     let strContainer = []\n\n//     let weightBool: boolean = false\n\n\n//     if (str.length === 10) {\n//         str = \"978\" + str.slice(0, 9);\n//         str = str.split(\"\");\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//         str = str.join().replace(/,/g, \"\")\n//         return c % 10 !== 0? str + check_digit.toString(): \"Invalid\";\n//     } else {\n//         str = str.split(\"\");\n//         // console.log(str);\n\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//          strContainer.reduce((a, b) => a + b) % 10 === 0\n//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;\n\n//          return isValid ? \"Valid\":\"Invalid\"\n//     }\n\n\n\n\n// }\n\n\n\n// export const isbn13 = (str: string | Array<any> | any) => {\n//     let isValid = false;\n//     let strContainer = [];\n  \n//     let weightBool = false;\n  \n//     if (str.length === 10) {\n//       str = \"978\" + str.slice(0, 9);\n//       str = str.split(\"\");\n  \n//       for (let index = 0; index < str.length; index++) {\n//         weightBool = !weightBool;\n//         strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n//       }\n  \n//       let sum = strContainer.reduce((a, b) => a + b);\n//       let checkDigit = (10 - (sum % 10)) % 10;\n//       str = str.join(\"\").replace(/,/g, \"\");\n  \n//       return sum % 10 !== 0 ? str + checkDigit.toString() : \"Invalid\";\n//     } else {\n//       str = str.split(\"\");\n  \n//       if (str[str.length - 1].toUpperCase() === 'X') {\n//         str[str.length - 1] = '10';\n//       }\n  \n//       for (let index = 0; index < str.length; index++) {\n//         weightBool = !weightBool;\n//         strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n//       }\n  \n//       let sum = strContainer.reduce((a, b) => a + b);\n//       isValid = sum % 10 === 0;\n  \n//       return isValid ? \"Valid\" : \"Invalid\";\n//     }\n//   };\n\n\nexport const isbn13 = (str: string | Array<any> | any) => {\n    if (str.length === 10) {\n      str = \"978\" + str.slice(0, 9);\n    }\n  \n    if (str.length !== 13) {\n      return \"Invalid\";\n    }\n  \n    let sum = 0;\n    let weight = 1;\n  \n    for (let i = 0; i < str.length - 1; i++) {\n      const digit = parseInt(str[i]);\n      if (isNaN(digit)) {\n        return \"Invalid\";\n      }\n      sum += digit * weight;\n      weight = (weight === 1) ? 3 : 1;\n    }\n  \n    const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n    const actualCheckDigit = parseInt(str[str.length - 1]);\n  console.log(actualCheckDigit+\" \"+calculatedCheckDigit);\n  \n    if (isNaN(actualCheckDigit)) {\n      return \"Invalid\";\n    }\n  \n    return calculatedCheckDigit === actualCheckDigit ? \"Valid\" : \"Invalid\";\n  };\n  "]}