"use strict";// export let isbn13 = (str: string | Array<any> | any) => {
function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="ad6787b78528fe9fa7d80bf42bd34a86aaec5a80";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:0},end:{line:4,column:24}},"2":{start:{line:34,column:15},end:{line:70,column:1}},"3":{start:{line:35,column:18},end:{line:35,column:23}},"4":{start:{line:36,column:23},end:{line:36,column:25}},"5":{start:{line:37,column:23},end:{line:37,column:25}},"6":{start:{line:38,column:21},end:{line:38,column:26}},"7":{start:{line:39,column:4},end:{line:69,column:5}},"8":{start:{line:40,column:8},end:{line:40,column:38}},"9":{start:{line:41,column:8},end:{line:41,column:28}},"10":{start:{line:42,column:8},end:{line:45,column:9}},"11":{start:{line:42,column:25},end:{line:42,column:26}},"12":{start:{line:43,column:12},end:{line:43,column:37}},"13":{start:{line:44,column:12},end:{line:44,column:78}},"14":{start:{line:46,column:18},end:{line:46,column:54}},"15":{start:{line:46,column:48},end:{line:46,column:53}},"16":{start:{line:47,column:25},end:{line:47,column:47}},"17":{start:{line:48,column:8},end:{line:48,column:45}},"18":{start:{line:49,column:8},end:{line:49,column:32}},"19":{start:{line:50,column:8},end:{line:55,column:9}},"20":{start:{line:51,column:12},end:{line:51,column:47}},"21":{start:{line:54,column:12},end:{line:54,column:29}},"22":{start:{line:58,column:8},end:{line:58,column:28}},"23":{start:{line:59,column:8},end:{line:61,column:9}},"24":{start:{line:60,column:12},end:{line:60,column:39}},"25":{start:{line:62,column:8},end:{line:65,column:9}},"26":{start:{line:62,column:25},end:{line:62,column:26}},"27":{start:{line:63,column:12},end:{line:63,column:37}},"28":{start:{line:64,column:12},end:{line:64,column:78}},"29":{start:{line:66,column:18},end:{line:66,column:54}},"30":{start:{line:66,column:48},end:{line:66,column:53}},"31":{start:{line:67,column:8},end:{line:67,column:33}},"32":{start:{line:68,column:8},end:{line:68,column:45}},"33":{start:{line:71,column:0},end:{line:71,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:15},end:{line:34,column:16}},loc:{start:{line:34,column:24},end:{line:70,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:46,column:38},end:{line:46,column:39}},loc:{start:{line:46,column:48},end:{line:46,column:53}},line:46},"2":{name:"(anonymous_2)",decl:{start:{line:66,column:38},end:{line:66,column:39}},loc:{start:{line:66,column:48},end:{line:66,column:53}},line:66}},branchMap:{"0":{loc:{start:{line:39,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:39,column:4},end:{line:69,column:5}},{start:{line:39,column:4},end:{line:69,column:5}}],line:39},"1":{loc:{start:{line:44,column:58},end:{line:44,column:76}},type:"cond-expr",locations:[{start:{line:44,column:71},end:{line:44,column:72}},{start:{line:44,column:75},end:{line:44,column:76}}],line:44},"2":{loc:{start:{line:50,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:55,column:9}},{start:{line:50,column:8},end:{line:55,column:9}}],line:50},"3":{loc:{start:{line:59,column:8},end:{line:61,column:9}},type:"if",locations:[{start:{line:59,column:8},end:{line:61,column:9}},{start:{line:59,column:8},end:{line:61,column:9}}],line:59},"4":{loc:{start:{line:64,column:58},end:{line:64,column:76}},type:"cond-expr",locations:[{start:{line:64,column:71},end:{line:64,column:72}},{start:{line:64,column:75},end:{line:64,column:76}}],line:64},"5":{loc:{start:{line:68,column:15},end:{line:68,column:44}},type:"cond-expr",locations:[{start:{line:68,column:25},end:{line:68,column:32}},{start:{line:68,column:35},end:{line:68,column:44}}],line:68}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:";AAAA,4DAA4D;;;AAG5D,2BAA2B;AAC3B,4BAA4B;AAE5B,sCAAsC;AAGtC,+BAA+B;AAC/B,yCAAyC;AACzC,+BAA+B;AAE/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AAEZ,wDAAwD;AACxD,iDAAiD;AACjD,6CAA6C;AAC7C,wEAAwE;AACxE,eAAe;AACf,+BAA+B;AAC/B,+BAA+B;AAG/B,6DAA6D;AAC7D,uCAAuC;AACvC,gFAAgF;AAEhF,YAAY;AACZ,uEAAuE;AACvE,wDAAwD;AACxD,iDAAiD;AACjD,2DAA2D;AAC3D,8FAA8F;AAE9F,8CAA8C;AAC9C,QAAQ;AAKR,IAAI;AAKG,MAAM,MAAM,GAAG,CAAC,GAA8B,EAAE,EAAE;IACrD,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,YAAY,GAAG,EAAE,CAAC;IAEtB,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE;QACrB,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEpB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC/C,UAAU,GAAG,CAAC,UAAU,CAAC;YACzB,YAAY,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE;QAED,IAAI,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,IAAI,UAAU,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;QACxC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxB,IAAG,GAAG,GAAG,EAAE,KAAK,CAAC,EAAE;YACjB,OAAO,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAA;SACnC;aAAI;YAED,OAAQ,SAAS,CAAC;SACrB;KACE;SAAK;QACJ,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEpB,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,EAAE;YAC7C,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;SAC5B;QAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC/C,UAAU,GAAG,CAAC,UAAU,CAAC;YACzB,YAAY,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnE;QAGD,IAAI,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,OAAO,GAAG,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;QAEzB,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;KACtC;AAEH,CAAC,CAAC;AA7CS,QAAA,MAAM,UA6Cf;AAGJ,8DAA8D;AAC9D,+BAA+B;AAC/B,uCAAuC;AACvC,QAAQ;AAER,+BAA+B;AAC/B,0BAA0B;AAC1B,QAAQ;AAER,mBAAmB;AACnB,sBAAsB;AAEtB,iDAAiD;AACjD,wCAAwC;AACxC,4BAA4B;AAC5B,4BAA4B;AAC5B,UAAU;AACV,+BAA+B;AAC/B,yCAAyC;AACzC,QAAQ;AAER,2DAA2D;AAC3D,8DAA8D;AAC9D,4DAA4D;AAE5D,qCAAqC;AACrC,0BAA0B;AAC1B,QAAQ;AAER,8EAA8E;AAC9E,OAAO",sourcesContent:["// export let isbn13 = (str: string | Array<any> | any) => {\n    \n    \n//     let isValid = false;\n//     let strContainer = []\n\n//     let weightBool: boolean = false\n\n\n//     if (str.length === 10) {\n//         str = \"978\" + str.slice(0, 9);\n//         str = str.split(\"\");\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//         str = str.join().replace(/,/g, \"\")\n//         return c % 10 !== 0? str + check_digit.toString(): \"Invalid\";\n//     } else {\n//         str = str.split(\"\");\n//         // console.log(str);\n\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//          strContainer.reduce((a, b) => a + b) % 10 === 0\n//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;\n\n//          return isValid ? \"Valid\":\"Invalid\"\n//     }\n\n\n\n\n// }\n\n\n\n\nexport const isbn13 = (str: string | Array<any> | any) => {\n    let isValid = false;\n    let strContainer = [];\n    let isbn10result = [];\n  \n    let weightBool = false;\n  \n    if (str.length === 10) {\n      str = \"978\" + str.slice(0, 9);\n      str = str.split(\"\");\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n      let sum = strContainer.reduce((a, b) => a + b);\n      let checkDigit = (10 - (sum % 10)) % 10;\n      str = str.join(\"\").replace(/,/g, \"\");\n  console.log(str.length);\n  if(sum % 10 === 0 ){\n    return str + checkDigit.toString()\n  }else{\n\n      return  \"Invalid\";\n  }\n    }else {\n      str = str.split(\"\");\n  \n      if (str[str.length - 1].toUpperCase() === 'X') {\n        str[str.length - 1] = '10';\n      }\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n\n      let sum = strContainer.reduce((a, b) => a + b);\n      isValid = sum % 10 === 0;\n  \n      return isValid ? \"Valid\" : \"Invalid\";\n    }\n    \n  };\n\n\n// export const isbn13 = (str: string | Array<any> | any) => {\n//     if (str.length === 10) {\n//       str = \"978\" + str.slice(0, 9);\n//     }\n  \n//     if (str.length !== 13) {\n//       return \"Invalid\";\n//     }\n  \n//     let sum = 0;\n//     let weight = 1;\n  \n//     for (let i = 0; i < str.length - 1; i++) {\n//       const digit = parseInt(str[i]);\n//       if (isNaN(digit)) {\n//         return \"Invalid\";\n//       }\n//       sum += digit * weight;\n//       weight = (weight === 1) ? 3 : 1;\n//     }\n  \n//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n//     const actualCheckDigit = parseInt(str[str.length - 1]);\n//   console.log(actualCheckDigit+\" \"+calculatedCheckDigit);\n  \n//     if (isNaN(actualCheckDigit)) {\n//       return \"Invalid\";\n//     }\n  \n//     return calculatedCheckDigit === actualCheckDigit ? \"Valid\" : \"Invalid\";\n//   };\n  "]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ad6787b78528fe9fa7d80bf42bd34a86aaec5a80"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;//     let isValid = false;
//     let strContainer = []
//     let weightBool: boolean = false
//     if (str.length === 10) {
//         str = "978" + str.slice(0, 9);
//         str = str.split("");
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//         str = str.join().replace(/,/g, "")
//         return c % 10 !== 0? str + check_digit.toString(): "Invalid";
//     } else {
//         str = str.split("");
//         // console.log(str);
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//          strContainer.reduce((a, b) => a + b) % 10 === 0
//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;
//          return isValid ? "Valid":"Invalid"
//     }
// }
cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;let isValid=(cov_1az1wpajte().s[3]++,false);let strContainer=(cov_1az1wpajte().s[4]++,[]);let isbn10result=(cov_1az1wpajte().s[5]++,[]);let weightBool=(cov_1az1wpajte().s[6]++,false);cov_1az1wpajte().s[7]++;if(str.length===10){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[8]++;str="978"+str.slice(0,9);cov_1az1wpajte().s[9]++;str=str.split("");cov_1az1wpajte().s[10]++;for(let index=(cov_1az1wpajte().s[11]++,0);index<str.length;index++){cov_1az1wpajte().s[12]++;weightBool=!weightBool;cov_1az1wpajte().s[13]++;strContainer[index]=parseInt(str[index])*(weightBool?(cov_1az1wpajte().b[1][0]++,1):(cov_1az1wpajte().b[1][1]++,3));}let sum=(cov_1az1wpajte().s[14]++,strContainer.reduce((a,b)=>{cov_1az1wpajte().f[1]++;cov_1az1wpajte().s[15]++;return a+b;}));let checkDigit=(cov_1az1wpajte().s[16]++,(10-sum%10)%10);cov_1az1wpajte().s[17]++;str=str.join("").replace(/,/g,"");cov_1az1wpajte().s[18]++;console.log(str.length);cov_1az1wpajte().s[19]++;if(sum%10===0){cov_1az1wpajte().b[2][0]++;cov_1az1wpajte().s[20]++;return str+checkDigit.toString();}else{cov_1az1wpajte().b[2][1]++;cov_1az1wpajte().s[21]++;return"Invalid";}}else{cov_1az1wpajte().b[0][1]++;cov_1az1wpajte().s[22]++;str=str.split("");cov_1az1wpajte().s[23]++;if(str[str.length-1].toUpperCase()==='X'){cov_1az1wpajte().b[3][0]++;cov_1az1wpajte().s[24]++;str[str.length-1]='10';}else{cov_1az1wpajte().b[3][1]++;}cov_1az1wpajte().s[25]++;for(let index=(cov_1az1wpajte().s[26]++,0);index<str.length;index++){cov_1az1wpajte().s[27]++;weightBool=!weightBool;cov_1az1wpajte().s[28]++;strContainer[index]=parseInt(str[index])*(weightBool?(cov_1az1wpajte().b[4][0]++,1):(cov_1az1wpajte().b[4][1]++,3));}let sum=(cov_1az1wpajte().s[29]++,strContainer.reduce((a,b)=>{cov_1az1wpajte().f[2]++;cov_1az1wpajte().s[30]++;return a+b;}));cov_1az1wpajte().s[31]++;isValid=sum%10===0;cov_1az1wpajte().s[32]++;return isValid?(cov_1az1wpajte().b[5][0]++,"Valid"):(cov_1az1wpajte().b[5][1]++,"Invalid");}};cov_1az1wpajte().s[33]++;exports.isbn13=isbn13;// export const isbn13 = (str: string | Array<any> | any) => {
//     if (str.length === 10) {
//       str = "978" + str.slice(0, 9);
//     }
//     if (str.length !== 13) {
//       return "Invalid";
//     }
//     let sum = 0;
//     let weight = 1;
//     for (let i = 0; i < str.length - 1; i++) {
//       const digit = parseInt(str[i]);
//       if (isNaN(digit)) {
//         return "Invalid";
//       }
//       sum += digit * weight;
//       weight = (weight === 1) ? 3 : 1;
//     }
//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;
//     const actualCheckDigit = parseInt(str[str.length - 1]);
//   console.log(actualCheckDigit+" "+calculatedCheckDigit);
//     if (isNaN(actualCheckDigit)) {
//       return "Invalid";
//     }
//     return calculatedCheckDigit === actualCheckDigit ? "Valid" : "Invalid";
//   };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,