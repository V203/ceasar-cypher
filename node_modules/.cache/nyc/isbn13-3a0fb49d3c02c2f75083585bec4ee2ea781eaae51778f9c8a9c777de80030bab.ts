"use strict";// export let isbn13 = (str: string | Array<any> | any) => {
function cov_1az1wpajte(){var path="/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts";var hash="b356e79f57d4b8c3783c32add4e2cb7a76cc6ad7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:62}},"1":{start:{line:4,column:0},end:{line:4,column:24}},"2":{start:{line:34,column:15},end:{line:74,column:1}},"3":{start:{line:35,column:18},end:{line:35,column:23}},"4":{start:{line:36,column:23},end:{line:36,column:25}},"5":{start:{line:37,column:23},end:{line:37,column:25}},"6":{start:{line:38,column:21},end:{line:38,column:26}},"7":{start:{line:39,column:4},end:{line:72,column:5}},"8":{start:{line:40,column:8},end:{line:47,column:9}},"9":{start:{line:41,column:26},end:{line:41,column:28}},"10":{start:{line:42,column:12},end:{line:45,column:13}},"11":{start:{line:42,column:25},end:{line:42,column:26}},"12":{start:{line:43,column:16},end:{line:43,column:52}},"13":{start:{line:44,column:16},end:{line:44,column:63}},"14":{start:{line:46,column:12},end:{line:46,column:70}},"15":{start:{line:46,column:52},end:{line:46,column:57}},"16":{start:{line:48,column:8},end:{line:48,column:38}},"17":{start:{line:49,column:8},end:{line:49,column:28}},"18":{start:{line:50,column:8},end:{line:53,column:9}},"19":{start:{line:50,column:25},end:{line:50,column:26}},"20":{start:{line:51,column:12},end:{line:51,column:37}},"21":{start:{line:52,column:12},end:{line:52,column:78}},"22":{start:{line:54,column:18},end:{line:54,column:54}},"23":{start:{line:54,column:48},end:{line:54,column:53}},"24":{start:{line:55,column:25},end:{line:55,column:47}},"25":{start:{line:56,column:8},end:{line:56,column:45}},"26":{start:{line:57,column:8},end:{line:57,column:32}},"27":{start:{line:58,column:8},end:{line:58,column:72}},"28":{start:{line:61,column:8},end:{line:61,column:28}},"29":{start:{line:62,column:8},end:{line:64,column:9}},"30":{start:{line:63,column:12},end:{line:63,column:39}},"31":{start:{line:65,column:8},end:{line:68,column:9}},"32":{start:{line:65,column:25},end:{line:65,column:26}},"33":{start:{line:66,column:12},end:{line:66,column:37}},"34":{start:{line:67,column:12},end:{line:67,column:78}},"35":{start:{line:69,column:18},end:{line:69,column:54}},"36":{start:{line:69,column:48},end:{line:69,column:53}},"37":{start:{line:70,column:8},end:{line:70,column:33}},"38":{start:{line:73,column:4},end:{line:73,column:41}},"39":{start:{line:75,column:0},end:{line:75,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:15},end:{line:34,column:16}},loc:{start:{line:34,column:24},end:{line:74,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:46,column:42},end:{line:46,column:43}},loc:{start:{line:46,column:52},end:{line:46,column:57}},line:46},"2":{name:"(anonymous_2)",decl:{start:{line:54,column:38},end:{line:54,column:39}},loc:{start:{line:54,column:48},end:{line:54,column:53}},line:54},"3":{name:"(anonymous_3)",decl:{start:{line:69,column:38},end:{line:69,column:39}},loc:{start:{line:69,column:48},end:{line:69,column:53}},line:69}},branchMap:{"0":{loc:{start:{line:39,column:4},end:{line:72,column:5}},type:"if",locations:[{start:{line:39,column:4},end:{line:72,column:5}},{start:{line:39,column:4},end:{line:72,column:5}}],line:39},"1":{loc:{start:{line:40,column:8},end:{line:47,column:9}},type:"if",locations:[{start:{line:40,column:8},end:{line:47,column:9}},{start:{line:40,column:8},end:{line:47,column:9}}],line:40},"2":{loc:{start:{line:43,column:16},end:{line:43,column:51}},type:"cond-expr",locations:[{start:{line:43,column:33},end:{line:43,column:44}},{start:{line:43,column:47},end:{line:43,column:51}}],line:43},"3":{loc:{start:{line:52,column:58},end:{line:52,column:76}},type:"cond-expr",locations:[{start:{line:52,column:71},end:{line:52,column:72}},{start:{line:52,column:75},end:{line:52,column:76}}],line:52},"4":{loc:{start:{line:58,column:15},end:{line:58,column:71}},type:"cond-expr",locations:[{start:{line:58,column:32},end:{line:58,column:59}},{start:{line:58,column:62},end:{line:58,column:71}}],line:58},"5":{loc:{start:{line:62,column:8},end:{line:64,column:9}},type:"if",locations:[{start:{line:62,column:8},end:{line:64,column:9}},{start:{line:62,column:8},end:{line:64,column:9}}],line:62},"6":{loc:{start:{line:67,column:58},end:{line:67,column:76}},type:"cond-expr",locations:[{start:{line:67,column:71},end:{line:67,column:72}},{start:{line:67,column:75},end:{line:67,column:76}}],line:67},"7":{loc:{start:{line:73,column:11},end:{line:73,column:40}},type:"cond-expr",locations:[{start:{line:73,column:21},end:{line:73,column:28}},{start:{line:73,column:31},end:{line:73,column:40}}],line:73}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},inputSourceMap:{version:3,file:"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts",sources:["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],names:[],mappings:"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",sourcesContent:["// export let isbn13 = (str: string | Array<any> | any) => {\n    \n    \n//     let isValid = false;\n//     let strContainer = []\n\n//     let weightBool: boolean = false\n\n\n//     if (str.length === 10) {\n//         str = \"978\" + str.slice(0, 9);\n//         str = str.split(\"\");\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//         str = str.join().replace(/,/g, \"\")\n//         return c % 10 !== 0? str + check_digit.toString(): \"Invalid\";\n//     } else {\n//         str = str.split(\"\");\n//         // console.log(str);\n\n\n//         for (let index = 0; str.length > index; index++) {\n//             weightBool = !weightBool\n//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)\n\n//         }\n//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)\n//         let c = strContainer.reduce((a, b) => a + b);\n//         let check_digit = (10 - (c % 10)) % 10\n//          strContainer.reduce((a, b) => a + b) % 10 === 0\n//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;\n\n//          return isValid ? \"Valid\":\"Invalid\"\n//     }\n\n\n\n\n// }\n\n\n\n\nexport const isbn13 = (str: string | Array<any> | any) => {\n    let isValid = false;\n    let strContainer = [];\n    let isbn10result = []\n  \n    let weightBool = false;\n  \n    if (str.length === 10) {\n\n        if(str.length === 10){\n            let counter = 11;\n           for(let i = 0; i < str.length; i++){\n            str[i] === \"X\" ? str[i] = 10: null;\n       isbn10result[i] = parseInt(str[i]) * counter--;\n\n           } \n           isValid = isbn10result.reduce((a,b) => a + b) % 11 === 0\n        }\n\n\n      str = \"978\" + str.slice(0, 9);\n      str = str.split(\"\");\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n      let sum = strContainer.reduce((a, b) => a + b);\n      let checkDigit = (10 - (sum % 10)) % 10;\n      str = str.join(\"\").replace(/,/g, \"\");\n  console.log(str.length);\n  \n      return sum % 10 !== 0 ? str + checkDigit.toString() : \"Invalid\";\n    }else {\n      str = str.split(\"\");\n  \n      if (str[str.length - 1].toUpperCase() === 'X') {\n        str[str.length - 1] = '10';\n      }\n  \n      for (let index = 0; index < str.length; index++) {\n        weightBool = !weightBool;\n        strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3);\n      }\n  \n\n      let sum = strContainer.reduce((a, b) => a + b);\n      isValid = sum % 10 === 0;\n  \n    //   return isValid ? \"Valid\" : \"Invalid\";\n    }\n    return isValid ? \"Valid\" : \"Invalid\";\n  };\n\n\n// export const isbn13 = (str: string | Array<any> | any) => {\n//     if (str.length === 10) {\n//       str = \"978\" + str.slice(0, 9);\n//     }\n  \n//     if (str.length !== 13) {\n//       return \"Invalid\";\n//     }\n  \n//     let sum = 0;\n//     let weight = 1;\n  \n//     for (let i = 0; i < str.length - 1; i++) {\n//       const digit = parseInt(str[i]);\n//       if (isNaN(digit)) {\n//         return \"Invalid\";\n//       }\n//       sum += digit * weight;\n//       weight = (weight === 1) ? 3 : 1;\n//     }\n  \n//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n//     const actualCheckDigit = parseInt(str[str.length - 1]);\n//   console.log(actualCheckDigit+\" \"+calculatedCheckDigit);\n  \n//     if (isNaN(actualCheckDigit)) {\n//       return \"Invalid\";\n//     }\n  \n//     return calculatedCheckDigit === actualCheckDigit ? \"Valid\" : \"Invalid\";\n//   };\n  "]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b356e79f57d4b8c3783c32add4e2cb7a76cc6ad7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1az1wpajte=function(){return actualCoverage;};}return actualCoverage;}cov_1az1wpajte();cov_1az1wpajte().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1az1wpajte().s[1]++;exports.isbn13=void 0;//     let isValid = false;
//     let strContainer = []
//     let weightBool: boolean = false
//     if (str.length === 10) {
//         str = "978" + str.slice(0, 9);
//         str = str.split("");
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//         str = str.join().replace(/,/g, "")
//         return c % 10 !== 0? str + check_digit.toString(): "Invalid";
//     } else {
//         str = str.split("");
//         // console.log(str);
//         for (let index = 0; str.length > index; index++) {
//             weightBool = !weightBool
//             strContainer[index] = parseInt(str[index]) * (weightBool ? 1 : 3)
//         }
//         console.log(strContainer.reduce((a, b) => a + b) % 10 === 0)
//         let c = strContainer.reduce((a, b) => a + b);
//         let check_digit = (10 - (c % 10)) % 10
//          strContainer.reduce((a, b) => a + b) % 10 === 0
//          strContainer.reduce((a, b) => a + b) % 10 === 0 ?  isValid =true : isValid =false;
//          return isValid ? "Valid":"Invalid"
//     }
// }
cov_1az1wpajte().s[2]++;const isbn13=str=>{cov_1az1wpajte().f[0]++;let isValid=(cov_1az1wpajte().s[3]++,false);let strContainer=(cov_1az1wpajte().s[4]++,[]);let isbn10result=(cov_1az1wpajte().s[5]++,[]);let weightBool=(cov_1az1wpajte().s[6]++,false);cov_1az1wpajte().s[7]++;if(str.length===10){cov_1az1wpajte().b[0][0]++;cov_1az1wpajte().s[8]++;if(str.length===10){cov_1az1wpajte().b[1][0]++;let counter=(cov_1az1wpajte().s[9]++,11);cov_1az1wpajte().s[10]++;for(let i=(cov_1az1wpajte().s[11]++,0);i<str.length;i++){cov_1az1wpajte().s[12]++;str[i]==="X"?(cov_1az1wpajte().b[2][0]++,str[i]=10):(cov_1az1wpajte().b[2][1]++,null);cov_1az1wpajte().s[13]++;isbn10result[i]=parseInt(str[i])*counter--;}cov_1az1wpajte().s[14]++;isValid=isbn10result.reduce((a,b)=>{cov_1az1wpajte().f[1]++;cov_1az1wpajte().s[15]++;return a+b;})%11===0;}else{cov_1az1wpajte().b[1][1]++;}cov_1az1wpajte().s[16]++;str="978"+str.slice(0,9);cov_1az1wpajte().s[17]++;str=str.split("");cov_1az1wpajte().s[18]++;for(let index=(cov_1az1wpajte().s[19]++,0);index<str.length;index++){cov_1az1wpajte().s[20]++;weightBool=!weightBool;cov_1az1wpajte().s[21]++;strContainer[index]=parseInt(str[index])*(weightBool?(cov_1az1wpajte().b[3][0]++,1):(cov_1az1wpajte().b[3][1]++,3));}let sum=(cov_1az1wpajte().s[22]++,strContainer.reduce((a,b)=>{cov_1az1wpajte().f[2]++;cov_1az1wpajte().s[23]++;return a+b;}));let checkDigit=(cov_1az1wpajte().s[24]++,(10-sum%10)%10);cov_1az1wpajte().s[25]++;str=str.join("").replace(/,/g,"");cov_1az1wpajte().s[26]++;console.log(str.length);cov_1az1wpajte().s[27]++;return sum%10!==0?(cov_1az1wpajte().b[4][0]++,str+checkDigit.toString()):(cov_1az1wpajte().b[4][1]++,"Invalid");}else{cov_1az1wpajte().b[0][1]++;cov_1az1wpajte().s[28]++;str=str.split("");cov_1az1wpajte().s[29]++;if(str[str.length-1].toUpperCase()==='X'){cov_1az1wpajte().b[5][0]++;cov_1az1wpajte().s[30]++;str[str.length-1]='10';}else{cov_1az1wpajte().b[5][1]++;}cov_1az1wpajte().s[31]++;for(let index=(cov_1az1wpajte().s[32]++,0);index<str.length;index++){cov_1az1wpajte().s[33]++;weightBool=!weightBool;cov_1az1wpajte().s[34]++;strContainer[index]=parseInt(str[index])*(weightBool?(cov_1az1wpajte().b[6][0]++,1):(cov_1az1wpajte().b[6][1]++,3));}let sum=(cov_1az1wpajte().s[35]++,strContainer.reduce((a,b)=>{cov_1az1wpajte().f[3]++;cov_1az1wpajte().s[36]++;return a+b;}));cov_1az1wpajte().s[37]++;isValid=sum%10===0;//   return isValid ? "Valid" : "Invalid";
}cov_1az1wpajte().s[38]++;return isValid?(cov_1az1wpajte().b[7][0]++,"Valid"):(cov_1az1wpajte().b[7][1]++,"Invalid");};cov_1az1wpajte().s[39]++;exports.isbn13=isbn13;// export const isbn13 = (str: string | Array<any> | any) => {
//     if (str.length === 10) {
//       str = "978" + str.slice(0, 9);
//     }
//     if (str.length !== 13) {
//       return "Invalid";
//     }
//     let sum = 0;
//     let weight = 1;
//     for (let i = 0; i < str.length - 1; i++) {
//       const digit = parseInt(str[i]);
//       if (isNaN(digit)) {
//         return "Invalid";
//       }
//       sum += digit * weight;
//       weight = (weight === 1) ? 3 : 1;
//     }
//     const calculatedCheckDigit = (10 - (sum % 10)) % 10;
//     const actualCheckDigit = parseInt(str[str.length - 1]);
//   console.log(actualCheckDigit+" "+calculatedCheckDigit);
//     if (isNaN(actualCheckDigit)) {
//       return "Invalid";
//     }
//     return calculatedCheckDigit === actualCheckDigit ? "Valid" : "Invalid";
//   };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,