{"version":3,"file":"/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts","sources":["/home/codex-coder/Documents/projects/ceasar-cypher/isbn13.ts"],"names":[],"mappings":";;;AAAA,SAAgB,IAAI,CAAC,IAAY;IAC7B,6CAA6C;IAC7C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAElC,iDAAiD;IACjD,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAExC,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE;QAC1B,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,QAAQ,EAAE;QACZ,OAAO,OAAO,CAAC;KAChB;IAED,6BAA6B;IAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,KAAK,GAAG,YAAY,CAAC;IACpC,MAAM,UAAU,GAAG,yBAAyB,CAAC,MAAM,CAAC,CAAC;IACrD,MAAM,MAAM,GAAG,MAAM,GAAG,UAAU,CAAC;IAEnC,OAAO,MAAM,CAAC;AAChB,CAAC;AAvBH,oBAuBG;AAED,SAAS,yBAAyB,CAAC,IAAY;IAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC1C,IAAI,GAAG,GAAG,CAAC,CAAC;IAEZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;KAClD;IAED,MAAM,UAAU,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IAC1C,OAAO,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC/B,CAAC","sourcesContent":["export function isbn(isbn: string): string {\n    // Remove any dashes or spaces from the input\n    isbn = isbn.replace(/[-\\s]/g, '');\n  \n    // Check if the ISBN is either ISBN-10 or ISBN-13\n    const isISBN10 = /^\\d{9}[\\dX]$/i.test(isbn);\n    const isISBN13 = /^\\d{13}$/i.test(isbn);\n  \n    if (!isISBN10 && !isISBN13) {\n      return 'Invalid';\n    }\n  \n    if (isISBN13) {\n      return 'Valid';\n    }\n  \n    // Convert ISBN-10 to ISBN-13\n    const isbn10Digits = isbn.slice(0, -1);\n    const prefix = '978' + isbn10Digits;\n    const checkDigit = calculateISBN13CheckDigit(prefix);\n    const isbn13 = prefix + checkDigit;\n  \n    return isbn13;\n  }\n  \n  function calculateISBN13CheckDigit(isbn: string): string {\n    const digits = isbn.split('').map(Number);\n    let sum = 0;\n  \n    for (let i = 0; i < digits.length; i++) {\n      sum += (i % 2 === 0) ? digits[i] : digits[i] * 3;\n    }\n  \n    const checkDigit = (10 - (sum % 10)) % 10;\n    return checkDigit.toString();\n  }"]}